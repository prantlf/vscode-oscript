-
  id: INDEX_SIZE_ERR
  type: Property
  synopsis: 'DOMParser.INDEX_SIZE_ERR: Integer'
  comment: |-
    If index or size is negative, or greater than the allowed
    value
-
  id: DOMSTRING_SIZE_ERR
  type: Property
  synopsis: 'DOMParser.DOMSTRING_SIZE_ERR: Integer'
  comment: |-
    If the specified range of text does not fit into a DOMString
-
  id: HIERARCHY_REQUEST_ERR
  type: Property
  synopsis: 'DOMParser.HIERARCHY_REQUEST_ERR: Integer'
  comment: |-
    If any node is inserted somewhere it doesn't belong
-
  id: WRONG_DOCUMENT_ERR
  type: Property
  synopsis: 'DOMParser.WRONG_DOCUMENT_ERR: Integer'
  comment: |-
    If a node is used in a different document than the one that
    created it (that doesn't support it)
-
  id: INVALID_CHARACTER_ERR
  type: Property
  synopsis: 'DOMParser.INVALID_CHARACTER_ERR: Integer'
  comment: |-
    If an invalid character is specified, such as in a name
-
  id: NO_DATA_ALLOWED_ERR
  type: Property
  synopsis: 'DOMParser.NO_DATA_ALLOWED_ERR: Integer'
  comment: |-
    If data is specified for a node which does not support data
-
  id: NO_MODIFICATION_ALLOWED_ERR
  type: Property
  synopsis: 'DOMParser.NO_MODIFICATION_ALLOWED_ERR: Integer'
  comment: |-
    If an attempt is made to modify an object where modifications are
    not allowed
-
  id: NOT_FOUND_ERR
  type: Property
  synopsis: 'DOMParser.NOT_FOUND_ERR: Integer'
  comment: |-
    If an attempt was made to reference a node in a context where it
    does not exist
-
  id: NOT_SUPPORTED_ERR
  type: Property
  synopsis: 'DOMParser.NOT_SUPPORTED_ERR: Integer'
  comment: |-
    If the implementation does not support the type of object
    requested
-
  id: INUSE_ATTRIBUTE_ERR
  type: Property
  synopsis: 'DOMParser.INUSE_ATTRIBUTE_ERR: Integer'
  comment: |-
    If an attempt is made to add an attribute that is already inuse
    elsewhere
-
  id: INVALID_STATE_ERR
  type: Property
  synopsis: 'DOMParser.INVALID_STATE_ERR: Integer'
  comment: |-
    Introduced in DOM Level 2. If an attempt is made to use an object
    that is not, or no longer, usable
-
  id: SYNTAX_ERR
  type: Property
  synopsis: 'DOMParser.SYNTAX_ERR: Integer'
  comment: |-
    Introduced in DOM Level 2. If an invalid or illegal string is
    specified.
-
  id: INVALID_MODIFICATION_ERR
  type: Property
  synopsis: 'DOMParser.INVALID_MODIFICATION_ERR: Integer'
  comment: |-
    Introduced in DOM Level 2. If an attempt is made to modify the
    type of the underlying object.
-
  id: NAMESPACE_ERR
  type: Property
  synopsis: 'DOMParser.NAMESPACE_ERR: Integer'
  comment: |-
    Introduced in DOM Level 2. If an attempt is made to create or
    change an object in a way which is incorrect with regard to
    namespaces.
-
  id: INVALID_ACCESS_ERR
  type: Property
  synopsis: 'DOMParser.INVALID_ACCESS_ERR: Integer'
  comment: |-
    Introduced in DOM Level 2. If a parameter or an operation is not
    supported by the underlying object.
-
  id: UNKNOWN_EXCEPTION
  type: Property
  synopsis: 'DOMParser.UNKNOWN_EXCEPTION: Integer'
  comment: |-
    Exception thrown that does not correspond to any of the known DOM
    exceptions.
-
  id: Message
  type: Property
  synopsis: 'DOMParser.Message: Integer'
  comment: |-
    Informational status or message.
-
  id: Warning
  type: Property
  synopsis: 'DOMParser.Warning: Integer'
  comment: |-
    Warning message.
-
  id: Error
  type: Property
  synopsis: 'DOMParser.Error: Integer'
  comment: |-
    Recoverable error.
-
  id: FatalError
  type: Property
  synopsis: 'DOMParser.FatalError: Integer'
  comment: |-
    Error that will stop processing.
-
  id: Val_Never
  type: Property
  synopsis: 'DOMParser.Val_Never: Integer'
  comment: |-
    Validation scheme - never validate. See SetValidationScheme.
-
  id: Val_Always
  type: Property
  synopsis: 'DOMParser.Val_Always: Integer'
  comment: |-
    Validation scheme - always validate.  See
    SetValidationScheme.
-
  id: Val_Auto
  type: Property
  synopsis: 'DOMParser.Val_Auto: Integer'
  comment: |-
    Validation scheme - automatically validate (default).  See
    SetValidationScheme.
-
  id: New
  type: Method
  synopsis: 'DOMParser.New(): DOMParser'
  comment: |-
    Create a new DOMParser instance.


    **Result**:
      A new DOMParser.
-
  id: Parse
  type: Method
  synopsis: 'DOMParser.Parse(String xmlFile): Assoc'
  comment: |-
    Parse an XML file into a DOM representation.

    **Parameters**:
      xmlFile: XML file to be parsed.

    **Result**:
      An Assoc that contains:
-
  id: ParseBytes
  type: Method
  synopsis: 'DOMParser.ParseBytes(Bytes xmlData): Assoc'
  comment: |-
    Parse an XML bytes array into a DOM representation.

    **Parameters**:
      xmlData: XML bytes array to be parsed.

    **Result**:
      An Assoc that contains:
-
  id: GetDocument
  type: Method
  synopsis: 'DOMParser.GetDocument(): DOMDocument'
  comment: |-
    Retrieves the Document node of the parsed document.


    **Result**:
      The Document node.
-
  id: GetErrorCount
  type: Method
  synopsis: 'DOMParser.GetErrorCount(): Integer'
  comment: |-
    Retrieves the number of parse errors associated with the parsed
    document.


    **Result**:
      An Integer of the number of errors.
-
  id: SetDoValidation
  type: Method
  synopsis: 'DOMParser.SetDoValidation(Boolean newState): Void'
  comment: |-
    Determines whether the XML document should be validated against
    the Document Type Definition (DTD). This method has been
    DEPRECATED and is replaced with SetValidationScheme

    **Parameters**:
      newState: TRUE if the XML document should be validated against
                the DTD.
-
  id: GetDoNamespaces
  type: Method
  synopsis: 'DOMParser.GetDoNamespaces(): Boolean'
  comment: |-
    Returns whether parser support for XML Namespaces is
    enabled.


    **Result**:
      Returns TRUE if parser support for XML Namespaces is enabled,
      FALSE otherwise.
-
  id: SetDoNamespaces
  type: Method
  synopsis: 'DOMParser.SetDoNamespaces(Boolean newState): Void'
  comment: |-
    Determines whether support for XML Namespaces should be
    enabled.

    **Parameters**:
      newState: TRUE if namespaces should be enabled.
-
  id: SetExpandEntityReferences
  type: Method
  synopsis: 'DOMParser.SetExpandEntityReferences(Boolean newState): Void'
  comment: |-
    Determines whether Entities should be expanded when parsed. This
    method has been DEPRECATED, and is replaced with
    SetCreateEntityReferenceNodes

    **Parameters**:
      newState: TRUE if entities should be expanded when parsed.
-
  id: SetEntityResolver
  type: Method
  synopsis: 'DOMParser.SetEntityResolver(Dynamic objref, Dynamic entryName): Void'
  comment: |-
    Sets the object reference and entry point name for the resolve
    entity callback.

    **Parameters**:
      objref: The reference to the object that has the script to be
              used in the callback.
      entryName: The script name of the callback that will be
                 executed on callback.
-
  id: GetExitOnFirstFatalError
  type: Method
  synopsis: 'DOMParser.GetExitOnFirstFatalError(): Boolean'
  comment: |-
    Returns whether parsing should exit with the first fatal
    error.


    **Result**:
      Returns TRUE if parser should exit parsing when it encounters
      the the first fatal error, FALSE otherwise.
-
  id: SetExitOnFirstFatalError
  type: Method
  synopsis: 'DOMParser.SetExitOnFirstFatalError(Boolean newState): Void'
  comment: |-
    Determines whether parsing should exit with the first fatal
    error.

    **Parameters**:
      newState: TRUE if parsing should exit with the first fatal
                error.
-
  id: GetValidationConstraintFatal
  type: Method
  synopsis: 'DOMParser.GetValidationConstraintFatal(): Boolean'
  comment: |-
    Returns whether the parser will consider validation constraint
    errors as fatal.


    **Result**:
      Returns TRUE, if the parser is currently configured to consider
      validation constraint errors as fatal, FALSE otherwise.
-
  id: SetValidationConstraintFatal
  type: Method
  synopsis: 'DOMParser.SetValidationConstraintFatal(Boolean newState): Void'
  comment: |-
    Determines whether the parser should consider validation
    constraint errors as fatal errors.

    **Parameters**:
      newState: TRUE, if the parser should consider validation
                constraint errors as fatal errors, FALSE
                otherwise.
-
  id: GetCreateEntityReferenceNodes
  type: Method
  synopsis: 'DOMParser.GetCreateEntityReferenceNodes(): Boolean'
  comment: |-
    Returns whether the parser will expand/create entity references
    when parsed.


    **Result**:
      Returns TRUE, if the parser will expand/create entities, FALSE
      otherwise.
-
  id: SetCreateEntityReferenceNodes
  type: Method
  synopsis: 'DOMParser.SetCreateEntityReferenceNodes(Boolean newState): Void'
  comment: |-
    Determines whether the parser should expand/create entity
    references.

    **Parameters**:
      newState: TRUE, if the parser should expand/create entity
                references, FALSE otherwise.
-
  id: GetIncludeIgnorableWhitespace
  type: Method
  synopsis: 'DOMParser.GetIncludeIgnorableWhitespace(): Boolean'
  comment: |-
    Returns whether parsed text nodes that can be considered
    ignorable whitespace are included in the DOM tree.


    **Result**:
      Returns TRUE, if the parser will create text nodes for
      ignorable whitespace, FALSE otherwise.
-
  id: SetIncludeIgnorableWhitespace
  type: Method
  synopsis: 'DOMParser.SetIncludeIgnorableWhitespace(Boolean newState): Void'
  comment: |-
    Determines whether the parser will create text nodes for
    ignorable whitespace.

    **Parameters**:
      newState: TRUE, if the parser will create text nodes for
                ignorable whitespace, FALSE otherwise.
-
  id: GetValidationScheme
  type: Method
  synopsis: 'DOMParser.GetValidationScheme(): Integer'
  comment: |-
    Returns the parser validation scheme.


    **Result**:
      Returns an Integer with one of the defined constant values:
      Val_Never or Val_Always or Val_Auto.
-
  id: SetValidationScheme
  type: Method
  synopsis: 'DOMParser.SetValidationScheme(Integer scheme): Void'
  comment: |-
    Determines parser validation scheme.

    **Parameters**:
      scheme: Val_Never The parser does not report validation errors.
              Val_Always The parser will always report validation
              errors. Val_Auto The parser will report validation
              errors only if a grammar is specified.
-
  id: GetDoSchema
  type: Method
  synopsis: 'DOMParser.GetDoSchema(): Boolean'
  comment: |-
    Returns whether the parser's schema support is enabled.


    **Result**:
      Returns TRUE, if the parser's schema support is enabled, FALSE
      otherwise.
-
  id: SetDoSchema
  type: Method
  synopsis: 'DOMParser.SetDoSchema(Boolean newState): Void'
  comment: |-
    Determines whether the parser's schema support is enabled.

    **Parameters**:
      newState: TRUE, to enable the parser's schema support. FALSE,
                to disable the parser's schema support.
-
  id: GetValidationSchemaFullChecking
  type: Method
  synopsis: 'DOMParser.GetValidationSchemaFullChecking(): Boolean'
  comment: |-
    Returns whether the parser will perform full schema constraint
    checking.


    **Result**:
      Returns TRUE, if the parser will perform full schema constraint
      checking, FALSE otherwise.
-
  id: SetValidationSchemaFullChecking
  type: Method
  synopsis: 'DOMParser.SetValidationSchemaFullChecking(Boolean newState): Void'
  comment: |-
    Determines whether the parser will perform checks on the schema
    grammar itself for additional errors. These additional checks
    could be time-consuming or memory intensive. The default is
    FALSE.

    **Parameters**:
      newState: TRUE, enable full schema constraint checking. FALSE,
                disable full schema constraint checking.
-
  id: GetExternalSchemaLocation
  type: Method
  synopsis: 'DOMParser.GetExternalSchemaLocation(): String'
  comment: |-
    Returns the previously specified list of schemas to use.


    **Result**:
      Returns a string containing the list of schemas to use that was
      previously set with SetExternalSchemaLocation.
-
  id: SetExternalSchemaLocation
  type: Method
  synopsis: 'DOMParser.SetExternalSchemaLocation(String schemaList): Void'
  comment: |-
    Set a list of schemas to use. The targetNamespace of a schema
    specified in this list will override the internal schema
    location in the instance document for both the schemaLocation
    attribute, or the "import" element.

    **Parameters**:
      schemaList: The syntax is the same as for schemaLocation
                  attributes in an instance document: e.g,
                  "http://www.schemas.com sample.xsd". The user can
                  specify more than one XML schema in the list.
-
  id: GetExternalNoNamespaceSchemaLocation
  type: Method
  synopsis: 'DOMParser.GetExternalNoNamespaceSchemaLocation(): String'
  comment: |-
    Returns the previously specified no target namespace XML schema
    location.


    **Result**:
      Returns a string containing the no target namespace XML schema
      location that was previously set with
      SetExternalNoNamespaceSchemaLocation.
-
  id: SetExternalSchemaLocation
  type: Method
  synopsis: 'DOMParser.SetExternalSchemaLocation(String location): Void'
  comment: |-
    Provide the no target namespace XML schema location.

    **Parameters**:
      location: The syntax is the same as for the
                noNamespaceSchemaLocation attribute in an instance
                document: e.g, "sample.xsd".
-
  id: GetLoadExternalDTD
  type: Method
  synopsis: 'DOMParser.GetLoadExternalDTD(): Boolean'
  comment: |-
    Returns whether the parser will load external DTD when the
    validation scheme is Val_Never.


    **Result**:
      Returns TRUE, if the loading of external DTD is enabled, FALSE
      otherwise.
-
  id: SetLoadExternalDTD
  type: Method
  synopsis: 'DOMParser.SetLoadExternalDTD(Boolean newState): Void'
  comment: |-
    Determines whether the parser will load external DTD when the
    validation scheme is Val_Never. This flag is ignored if the
    validation scheme is set (see SetValidationScheme) to Val_Always
    or Val_Auto.

    **Parameters**:
      newState: FALSE, parser will ignore any external DTD completely
                when the validation scheme is Val_Never. TRUE,
                otherwise (default).
-
  id: GetCreateCommentNodes
  type: Method
  synopsis: 'DOMParser.GetCreateCommentNodes(): Boolean'
  comment: |-
    Returns whether the parser will create comment nodes in the DOM
    tree.


    **Result**:
      Returns TRUE, the parser will create comment nodes in the DOM
      tree, FALSE otherwise.
-
  id: SetCreateCommentNodes
  type: Method
  synopsis: 'DOMParser.SetCreateCommentNodes(Boolean newState): Void'
  comment: |-
    Determines whether the parser will create comment nodes in the
    DOM tree.

    **Parameters**:
      newState: TRUE, enables the creation of comment nodes in the
                DOM tree. FALSE, disables the creation of comment
                nodes in the DOM tree.

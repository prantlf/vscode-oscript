-
  id: AUDIT_SUBWORKDONE
  type: Property
  synopsis: 'WAPI.AUDIT_SUBWORKDONE: Integer'
  comment: |-
    An audit trail constant specifying that a sub-workflow
    finished.
-
  id: AUDIT_SUBWORKSTARTED
  type: Property
  synopsis: 'WAPI.AUDIT_SUBWORKSTARTED: Integer'
  comment: |-
    An audit trail constant specifying that a sub-workflow
    started.
-
  id: AUDIT_SUBWORKUPDATED
  type: Property
  synopsis: 'WAPI.AUDIT_SUBWORKUPDATED: Integer'
  comment: |-
    An audit trail constant specifying that a sub-workflow map
    definition was modified.
-
  id: AUDIT_TASKACCEPTED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKACCEPTED: Integer'
  comment: |-
    An audit trail constant specifying that a task assigned to a
    group was accepted by a member of the group.
-
  id: AUDIT_TASKBKGNSENDON
  type: Property
  synopsis: 'WAPI.AUDIT_TASKBKGNSENDON: Integer'
  comment: |-
    An audit trail constant specifying that the task's send on
    processing has been done in the background using the Workflow
    Agent.
-
  id: AUDIT_TASKBKGNSTARTED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKBKGNSTARTED: Integer'
  comment: |-
    An audit trail constant specifying that work on a task (in the
    base system this includes any auto done step or Item Handler
    step) has been started in the background using the Workflow
    Agent.
-
  id: AUDIT_TASKCANCELLED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKCANCELLED: Integer'
  comment: |-
    An audit trail constant specifying that a task as been
    cancelled.
-
  id: AUDIT_TASKDONE
  type: Property
  synopsis: 'WAPI.AUDIT_TASKDONE: Integer'
  comment: |-
    An audit trail constant specifying that work on a task had been
    completed and the task marked as done.
-
  id: AUDIT_TASKEXECUTING
  type: Property
  synopsis: 'WAPI.AUDIT_TASKEXECUTING: Integer'
  comment: |-
    An audit trail constant specifying that the task was
    executing.
-
  id: AUDIT_TASKFINISHED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKFINISHED: Integer'
  comment: |-
    An audit trail constant specifying that work on a task had been
    finished for the current work period, but the task was not
    marked as done.
-
  id: AUDIT_TASKKILLED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKKILLED: Integer'
  comment: |-
    An audit trail constant specifying that a task was marked as
    killed.
-
  id: AUDIT_TASKREADY
  type: Property
  synopsis: 'WAPI.AUDIT_TASKREADY: Integer'
  comment: |-
    An audit trail constant specifying that a task became ready.
-
  id: AUDIT_TASKREASSIGNED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKREASSIGNED: Integer'
  comment: |-
    An audit trail constant specifying that a task was reassigned to
    a different user.
-
  id: AUDIT_TASKRESUMED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKRESUMED: Integer'
  comment: |-
    An audit trail constant specifying that a suspended task was
    resumed.
-
  id: AUDIT_TASKRESURRECTED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKRESURRECTED: Integer'
  comment: |-
    An audit trail constant specifying that a task was
    resurrected.
-
  id: AUDIT_TASKSTARTED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKSTARTED: Integer'
  comment: |-
    An audit trail constant specifying that work on a task was
    started.
-
  id: AUDIT_TASKSUSPENDED
  type: Property
  synopsis: 'WAPI.AUDIT_TASKSUSPENDED: Integer'
  comment: |-
    An audit trail constant specifying that a task was
    suspended.
-
  id: AUDIT_USERDATA
  type: Property
  synopsis: 'WAPI.AUDIT_USERDATA: Integer'
  comment: |-
    An audit trail constant specifying that a custom event was added
    to the audit trail.
-
  id: AUDIT_WORKARCHIVED
  type: Property
  synopsis: 'WAPI.AUDIT_WORKARCHIVED: Integer'
  comment: |-
    An audit trail constant specifying that the workflow was
    archived.
-
  id: AUDIT_WORKDONE
  type: Property
  synopsis: 'WAPI.AUDIT_WORKDONE: Integer'
  comment: |-
    An audit trail constant specifying that the workflow was
    completed.
-
  id: AUDIT_WORKRESUMED
  type: Property
  synopsis: 'WAPI.AUDIT_WORKRESUMED: Integer'
  comment: |-
    An audit trail constant specifying that the suspended workflow
    was resumed.
-
  id: AUDIT_WORKSTARTED
  type: Property
  synopsis: 'WAPI.AUDIT_WORKSTARTED: Integer'
  comment: |-
    An audit trail constant specifying that the workflow was
    started.
-
  id: AUDIT_WORKSTOPPED
  type: Property
  synopsis: 'WAPI.AUDIT_WORKSTOPPED: Integer'
  comment: |-
    An audit trail constant specifying that the workflow was
    stopped.
-
  id: AUDIT_WORKSUSPENDED
  type: Property
  synopsis: 'WAPI.AUDIT_WORKSUSPENDED: Integer'
  comment: |-
    An audit trail constant specifying that the workflow was
    suspended.
-
  id: 'FALSE'
  type: Property
  synopsis: 'WAPI.FALSE: Integer'
  comment: |-
    A constant specifying that the False links should be taken.
-
  id: LIST_IFINITIATED
  type: Property
  synopsis: 'WAPI.LIST_IFINITIATED: Integer'
  comment: |-
    A constant specifying that only entries where the current user
    was the initiator should be returned.
-
  id: LIST_IFMANAGED
  type: Property
  synopsis: 'WAPI.LIST_IFMANAGED: Integer'
  comment: |-
    A constant specifying that only entries where the current user is
    the manager should be returned.
-
  id: LIST_IFPERFORMER
  type: Property
  synopsis: 'WAPI.LIST_IFPERFORMER: Integer'
  comment: |-
    A constant specifying that only entries where the current user is
    the task performer should be returned.
-
  id: LOOP
  type: Property
  synopsis: 'WAPI.LOOP: Integer'
  comment: |-
    A constant specifying that the Loop links should be taken.
-
  id: MAP_FLAG_ARCHIVEONCOMPLETE
  type: Property
  synopsis: 'WAPI.MAP_FLAG_ARCHIVEONCOMPLETE: Integer'
  comment: |-
    A constant specifying that the workflow should automatically be
    Archived upon completion.
-
  id: MAP_FLAG_DELETEONCOMPLETE
  type: Property
  synopsis: 'WAPI.MAP_FLAG_DELETEONCOMPLETE: Integer'
  comment: |-
    A constant specifying that the workflow should automatically be
    Deleted upon completion.
-
  id: MAP_FLAG_EMAILATTACHMENTASFILE
  type: Property
  synopsis: 'WAPI.MAP_FLAG_EMAILATTACHMENTASFILE: Integer'
  comment: |-
    A constant specifying that the e-mail sent by the workflow will
    contain their attachments as files included with the
    e-mail.
-
  id: MAP_FLAG_EMAILATTACHMENTASLINK
  type: Property
  synopsis: 'WAPI.MAP_FLAG_EMAILATTACHMENTASLINK: Integer'
  comment: |-
    A constant specifying that the e-mail sent by the workflow will
    contain their attachments as HTML links back into Livelink.
-
  id: MAP_FLAG_RESUMEONRETURN
  type: Property
  synopsis: 'WAPI.MAP_FLAG_RESUMEONRETURN: Integer'
  comment: |-
    A constant specifying that when this Map is used for a
    sub-workflow and the sub-workflow completes, the task that
    started the sub-workflow should be marked as done and the
    workflow route continued.
-
  id: MAP_FLAG_SKIPWEEKENDS
  type: Property
  synopsis: 'WAPI.MAP_FLAG_SKIPWEEKENDS: Integer'
  comment: |-
    A constant specifying that the workflow should skip weekends when
    calculating due date.
-
  id: MAP_FLAG_TEMPMAP
  type: Property
  synopsis: 'WAPI.MAP_FLAG_TEMPMAP: Integer'
  comment: |-
    A constant specifying that the Map should automatically be
    Deleted when the workflow is deleted.
-
  id: MAPTASK_FALSELINKS
  type: Property
  synopsis: 'WAPI.MAPTASK_FALSELINKS: Integer'
  comment: |-
    A constant specifying that the False branches from a task should
    be taken. This constant should be used as the linkType for a
    call to WAPI.TaskDone().
-
  id: MAPTASK_FLAG_AUTODONE
  type: Property
  synopsis: 'WAPI.MAPTASK_FLAG_AUTODONE: Integer'
  comment: |-
    A constant specifying that the task should automatically become
    Done as soon as it becomes ready.
-
  id: MAPTASK_FLAG_BKGNSENDON
  type: Property
  synopsis: 'WAPI.MAPTASK_FLAG_BKGNSENDON: Integer'
  comment: |-
    A constant specifying that the task's send on processing should
    occur in the background (by the Workflow Agent as a separate
    process).  This is used to gain efficiencies and performance
    improvements especially if the steps proceeding this step are
    autodone steps ( for example, Evaluate, Process, Subworkflow,
    Milestone, etc.).
-
  id: MAPTASK_FLAG_EMAILENABLED
  type: Property
  synopsis: 'WAPI.MAPTASK_FLAG_EMAILENABLED: Integer'
  comment: |-
    A constant specifying that the task has been e-mail enabled. When
    this task becomes ready, an e-mail will be sent to the
    Assignee(s) allowing the task to be completed through
    e-mail.
-
  id: MAPTASK_FLAG_MILESTONE
  type: Property
  synopsis: 'WAPI.MAPTASK_FLAG_MILESTONE: Integer'
  comment: |-
    A constant specifying that the task should be marked as a
    Milestone task and Milestone dates should be calculated and
    stored.
-
  id: MAPTASK_FLAG_RECALCULATE
  type: Property
  synopsis: 'WAPI.MAPTASK_FLAG_RECALCULATE: Integer'
  comment: |-
    A constant specifying that the task should invoke the recalculate
    due date processing when the task has been sent on.
-
  id: MAPTASK_LOOPLINKS
  type: Property
  synopsis: 'WAPI.MAPTASK_LOOPLINKS: Integer'
  comment: |-
    A constant specifying that the Loopback branch from a task should
    be taken. This constant should be used as the linkType for a
    call to WAPI.TaskDone().
-
  id: MAPTASK_TRUELINKS
  type: Property
  synopsis: 'WAPI.MAPTASK_TRUELINKS: Integer'
  comment: |-
    A constant specifying that the True branches from a task should
    be taken. This constant should be used as the linkType for a
    call to WAPI.TaskDone().
-
  id: STARTTASK_FLAG_NOAUDIT
  type: Property
  synopsis: 'WAPI.STARTTASK_FLAG_NOAUDIT: Integer'
  comment: |-
    A constant specifying that the WAPI.StartTask() call should not
    add an event to the audit trail.
-
  id: STARTTASK_FLAG_REEXECUTE
  type: Property
  synopsis: 'WAPI.STARTTASK_FLAG_REEXECUTE: Integer'
  comment: |-
    A constant specifying that the WAPI.StartTask() call should mark
    the task as started even if it was already marked as
    started.
-
  id: SUBWORKTASK_CUSTOMDATA
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_CUSTOMDATA: Integer'
  comment: |-
    A constant specifying the CustomData for a workflow task in an
    update call.
-
  id: SUBWORKTASK_FLAGS
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_FLAGS: Integer'
  comment: |-
    A constant specifying the Flags for a workflow task in an update
    call.
-
  id: SUBWORKTASK_FLAG_AUTODONE
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_FLAG_AUTODONE: Integer'
  comment: |-
    A constant specifying that the task should automatically complete
    when it becomes ready.
-
  id: SUBWORKTASK_FLAG_BACKGROUND
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_FLAG_BACKGROUND: Integer'
  comment: |-
    A constant specifying that the task should be performed in the
    background (by the Workflow Agent). The Item Handler step is the
    only step that supports this capability.
-
  id: SUBWORKTASK_FLAG_BKGNSENDON
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_FLAG_BKGNSENDON: Integer'
  comment: |-
    A constant specifying that the task's send on processing should
    occur in the background (by the Workflow Agent as a separate
    process). This is used to gain efficiencies and performance
    improvements especially if the steps proceeding this step are
    autodone steps ( for example, Evaluate, Process, Subworkflow,
    Milestone, etc.).
-
  id: SUBWORKTASK_FLAG_MILESTONE
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_FLAG_MILESTONE: Integer'
  comment: |-
    A constant specifying that the task should be a Milestone task
    and store a Milestone due date.
-
  id: SUBWORKTASK_FLAG_RECALCULATE
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_FLAG_RECALCULATE: Integer'
  comment: |-
    A constant specifying that the task should invoke the recalculate
    due date processing when the task has been sent on.
-
  id: SUBWORKTASK_PERFORMERID
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_PERFORMERID: Integer'
  comment: |-
    A constant specifying the PerformerID for a task in a workflow
    for an update call.
-
  id: SUBWORKTASK_STATUS_DELETED
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_DELETED: Integer'
  comment: |-
    A status constant specifying that the task was deleted.
-
  id: SUBWORKTASK_STATUS_DONE
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_DONE: Integer'
  comment: |-
    A status constant specifying that the task is done.
-
  id: SUBWORKTASK_STATUS_EXECUTING
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_EXECUTING: Integer'
  comment: |-
    A status constant specifying that the task is executing.
-
  id: SUBWORKTASK_STATUS_FINISHED
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_FINISHED: Integer'
  comment: |-
    A status constant specifying that the task is finished.
-
  id: SUBWORKTASK_STATUS_KILLED
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_KILLED: Integer'
  comment: |-
    A status constant specifying that the task was killed.
-
  id: SUBWORKTASK_STATUS_READY
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_READY: Integer'
  comment: |-
    A status constant specifying that the task is ready.
-
  id: SUBWORKTASK_STATUS_READY_BG
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_READY_BG: Integer'
  comment: |-
    A status constant specifying that the task is ready in the
    background (currently this is only supported with the Item
    Handler step).
-
  id: SUBWORKTASK_STATUS_SENDINGON
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_SENDINGON: Integer'
  comment: |-
    A status constant specifying that the task's send on processing
    is being performed in the background by the Workflow Agent.
-
  id: SUBWORKTASK_STATUS_STARTED
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_STARTED: Integer'
  comment: |-
    A status constant specifying that the task is started.
-
  id: SUBWORKTASK_STATUS_SUSPENDED
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_SUSPENDED: Integer'
  comment: |-
    A status constant specifying that the task is suspended.
-
  id: SUBWORKTASK_STATUS_WAITING
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_STATUS_WAITING: Integer'
  comment: |-
    A status constant specifying that the task is waiting to become
    ready.
-
  id: SUBWORKTASK_TITLE
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_TITLE: Integer'
  comment: |-
    A constant specifying the Title of a task in a workflow for an
    update call.
-
  id: SUBWORKTASK_TYPE_MILESTONE
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_TYPE_MILESTONE: Integer'
  comment: |-
    A constant specifying that the task is a Milestone task.
-
  id: SUBWORKTASK_TYPE_NORMAL
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_TYPE_NORMAL: Integer'
  comment: |-
    A constant specifying that the task is a Normal task and not a
    Milestone task.
-
  id: SUBWORKTASK_USERCOMMENT
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_USERCOMMENT: Integer'
  comment: |-
    A constant specifying the UserComment for a task in a workflow
    for an update call.
-
  id: SUBWORKTASK_USERDATA
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_USERDATA: Integer'
  comment: |-
    A constant specifying the UserData for a task in a workflow for
    an update call.
-
  id: SUBWORKTASK_USERSTATUS
  type: Property
  synopsis: 'WAPI.SUBWORKTASK_USERSTATUS: Integer'
  comment: |-
    A constant specifying the UserStatus for a task in a workflow for
    an update call.
-
  id: SUBWORK_CUSTOMDATA
  type: Property
  synopsis: 'WAPI.SUBWORK_CUSTOMDATA: Integer'
  comment: |-
    A constant specifying the CustomData for a subWork in an update
    call.
-
  id: SUBWORK_FLAGS
  type: Property
  synopsis: 'WAPI.SUBWORK_FLAGS: Integer'
  comment: |-
    A constant specifying the Flags for a subWorkflow in an update
    call.
-
  id: SUBWORK_FLAG_ARCHIVEONCOMPLETE
  type: Property
  synopsis: 'WAPI.SUBWORK_FLAG_ARCHIVEONCOMPLETE: Integer'
  comment: |-
    A constant specifying that the workflow should automatically be
    Archived upon completion.
-
  id: SUBWORK_FLAG_DELETEONCOMPLETE
  type: Property
  synopsis: 'WAPI.SUBWORK_FLAG_DELETEONCOMPLETE: Integer'
  comment: |-
    A constant specifying that the workflow should automatically be
    Deleted upon completion.
-
  id: SUBWORK_FLAG_RESUMEONRETURN
  type: Property
  synopsis: 'WAPI.SUBWORK_FLAG_RESUMEONRETURN: Integer'
  comment: |-
    A constant specifying that when this workflow is used for a
    sub-workflow and the sub-workflow completes, the task that
    started the sub-workflow should be marked as done and the
    workflow route continued.
-
  id: SUBWORK_FLAG_SKIPWEEKENDS
  type: Property
  synopsis: 'WAPI.SUBWORK_FLAG_SKIPWEEKENDS: Integer'
  comment: |-
    A constant specifying that the workflow should skip weekends when
    calculating due dates.
-
  id: SUBWORK_FLAG_TEMPMAP
  type: Property
  synopsis: 'WAPI.SUBWORK_FLAG_TEMPMAP: Integer'
  comment: |-
    A constant specifying that the Map definition that is used by
    this workflow should be deleted when the workflow is
    deleted.
-
  id: SUBWORK_PROJECT
  type: Property
  synopsis: 'WAPI.SUBWORK_PROJECT: Integer'
  comment: |-
    A constant specifying the Project for a subWorkflow in an update
    call.
-
  id: SUBWORK_STATUS_DONE
  type: Property
  synopsis: 'WAPI.SUBWORK_STATUS_DONE: Integer'
  comment: |-
    A status constant specifying that the subwork has completed.
-
  id: SUBWORK_STATUS_EXECUTING
  type: Property
  synopsis: 'WAPI.SUBWORK_STATUS_EXECUTING: Integer'
  comment: |-
    A status constant specifying that the subwork has not yet
    completed.
-
  id: SUBWORK_TITLE
  type: Property
  synopsis: 'WAPI.SUBWORK_TITLE: Integer'
  comment: |-
    A constant specifying the Title of a subWorkflow in an update
    call.
-
  id: SUBWORK_USERDATA
  type: Property
  synopsis: 'WAPI.SUBWORK_USERDATA: Integer'
  comment: |-
    A constant specifying the UserData for a subWorkflow in an update
    call.
-
  id: 'TRUE'
  type: Property
  synopsis: 'WAPI.TRUE: Integer'
  comment: |-
    A constant specifying that the True links should be taken.
-
  id: WORK_CUSTOMDATA
  type: Property
  synopsis: 'WAPI.WORK_CUSTOMDATA: Integer'
  comment: |-
    A constant specifying the CustomData for a workflow in an update
    call.
-
  id: WORK_FLAGS
  type: Property
  synopsis: 'WAPI.WORK_FLAGS: Integer'
  comment: |-
    A constant specifying the Flags for a workflow in an update
    call.
-
  id: WORK_MANAGERID
  type: Property
  synopsis: 'WAPI.WORK_MANAGERID: Integer'
  comment: |-
    A constant specifying the ManagerID for a workflow in an update
    call.
-
  id: WORK_OWNERID
  type: Property
  synopsis: 'WAPI.WORK_OWNERID: Integer'
  comment: |-
    A constant specifying the OwnerID for a workflow in an update
    call.
-
  id: WORK_PROJECT
  type: Property
  synopsis: 'WAPI.WORK_PROJECT: Integer'
  comment: |-
    A constant specifying the Project for a workflow in an update
    call.
-
  id: WORK_STATUS_ARCHIVED
  type: Property
  synopsis: 'WAPI.WORK_STATUS_ARCHIVED: Integer'
  comment: |-
    A status constant specifying that the workflow has been
    Archived.
-
  id: WORK_STATUS_DONE
  type: Property
  synopsis: 'WAPI.WORK_STATUS_DONE: Integer'
  comment: |-
    A status constant specifying that the workflow has been
    Completed.
-
  id: WORK_STATUS_EXECUTING
  type: Property
  synopsis: 'WAPI.WORK_STATUS_EXECUTING: Integer'
  comment: |-
    A status constant specifying that the workflow is still
    executing.
-
  id: WORK_STATUS_STOPPED
  type: Property
  synopsis: 'WAPI.WORK_STATUS_STOPPED: Integer'
  comment: |-
    A status constant specifying that the workflow has been
    Stopped.
-
  id: WORK_STATUS_SUSPENDED
  type: Property
  synopsis: 'WAPI.WORK_STATUS_SUSPENDED: Integer'
  comment: |-
    A status constant specifying that the workflow has been
    Suspended.
-
  id: WORK_TITLE
  type: Property
  synopsis: 'WAPI.WORK_TITLE: Integer'
  comment: |-
    A constant specifying the Title for a workflow in an update
    call.
-
  id: WORK_USERDATA
  type: Property
  synopsis: 'WAPI.WORK_USERDATA: Integer'
  comment: |-
    A constant specifying the UserData for a workflow in an update
    call.
-
  id: AcceptTask
  type: Method
  synopsis: 'WAPI.AcceptTask(WAPIWORK work, Integer workID, Integer subworkID, Integer taskID): Integer'
  comment: |-
    Assigns a step that was previously assigned to a group to the
    currently logged in user.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.
      subworkID: The subworkID for the desired sub-workflow.
      taskID: The taskID for the desired step.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: AccessWork
  type: Method
  synopsis: 'WAPI.AccessWork(WAPIWORK work, Integer workID, [Integer subworkID]): Integer'
  comment: |-
    Sets up a WAPIWORK object handle to provide access to the data
    package of a workflow.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.
      subworkID: The optional subworkID for the desired
                 sub-workflow.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: AddTaskLink
  type: Method
  synopsis: 'WAPI.AddTaskLink(WAPIMAPTASK fromtask, Integer linktype, WAPIMAPTASK totask): Integer'
  comment: |-
    Adds a link, of the specified type, between the specified
    tasks.

    **Parameters**:
      fromtask: The WAPIMAPTASK handle specifying the task the link
                should come from.
      linktype: Specifies a constant indicating the link type, can
                be: WAPI.MAPTASK_FALSELINKS WAPI.MAPTASK_LOOPLINKS
                WAPI.MAPTASK_TRUELINKS
      totask: The WAPIMAPTASK handle specifying the task the link
              should go to.

    **Result**:

-
  id: AddWorkData
  type: Method
  synopsis: 'WAPI.AddWorkData(WAPIWORK work, Integer type, Integer subtype, [String descripton], Dynamic value): Integer'
  comment: |-
    Creates and sets data stored in a data package.

    The WAPIMAPTASK handle specifying the task the link should go to.
    workThe WAPIMAPTASK handle specifying the task the link should go to.
    work -The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle.The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. typeThe WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type -The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package
    type.The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtypeThe WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtype -The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtype - The data package subtype.The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtype - The data package subtype. descriptionThe WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtype - The data package subtype. description -The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtype - The data package subtype. description - Optional
    description of the data.The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtype - The data package subtype. description - Optional
    description of the data. valueThe WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtype - The data package subtype. description - Optional
    description of the data. value -The WAPIMAPTASK handle specifying the task the link should go to.
    work - The WAPIWORK object handle. type - The data package type.
    subtype - The data package subtype. description - Optional
    description of the data. value - The data value to store.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: AllocMap
  type: Method
  synopsis: 'WAPI.AllocMap(WAPISESSION session): WAPIMAP'
  comment: |-
    Allocates a WAPIMAP object handle. This map handle is used to
    define workflow maps.

    **Parameters**:
      session: The WAPISESSION object handle.

    **Result**:
      The WAPIMAP object handle if successful; Error otherwise.
-
  id: AllocMapTask
  type: Method
  synopsis: 'WAPI.AllocMapTask(WAPIMAP map): WAPIMAPTASK'
  comment: |-
    Allocates a WAPIMAPTASK object handle. This mapTask handle is
    used to define a task for a workflow map.

    **Parameters**:
      map: The WAPIMAP object handle for the desired workflow
           map.

    **Result**:
      The WAPIMAPTASK object handle if successful; Error
      otherwise.
-
  id: AllocNthMapTask
  type: Method
  synopsis: 'WAPI.AllocNthMapTask(WAPIMAP map, Integer taskID): WAPIMAPTASK'
  comment: |-
    Allocates a WAPIMAPTASK object handle for a particular task in a
    workflow map definition. This mapTask handle is used to define a
    task for a workflow map.

    **Parameters**:
      map: The WAPIMAP object handle for the desired workflow
           map.
      taskID: The id for the desired workflow task.

    **Result**:
      The WAPIMAPTASK object handle if successful; Error
      otherwise.
-
  id: AllocSession
  type: Method
  synopsis: 'WAPI.AllocSession(CAPILOGIN login): WAPISESSION'
  comment: |-
    Allocates a WAPISESSION object for a login user.

    **Parameters**:
      login: The CAPILOGIN object handle specifically for the login
             user.

    **Result**:
      The WAPISESSION object handle if successful; Error
      otherwise.
-
  id: AllocSubWork
  type: Method
  synopsis: 'WAPI.AllocSubWork(WAPIWORK work): WAPISUBWORK'
  comment: |-
    Allocates a WAPISUBWORK object for the specified WAPIWORK
    object.

    **Parameters**:
      work: The WAPIWORK object handle.

    **Result**:
      The WAPISUBWORK object handle if successful; Error
      otherwise.
-
  id: AllocWork
  type: Method
  synopsis: 'WAPI.AllocWork(WAPISESSION session): WAPIWORK'
  comment: |-
    Allocates a WAPIWORK object.

    **Parameters**:
      session: The WAPISESSION object handle.

    **Result**:
      The WAPIWORK object handle if successful; Error otherwise.
-
  id: ArchiveWork
  type: Method
  synopsis: 'WAPI.ArchiveWork(WAPIWORK work, Integer workID): Integer'
  comment: |-
    Sets the status of a Stopped or Completed workflow to
    Archived.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: CallSubWork
  type: Method
  synopsis: 'WAPI.CallSubWork(WAPIWORK work): Integer'
  comment: |-
    Initiates a Sub-Workflow using the information supplied in a
    previous call to WAPI.PrepareSubMap() or
    WAPI.PrepareSubWork().

    **Parameters**:
      work: The WAPIWORK object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: ColumnStringToValue
  type: Method
  synopsis: 'WAPI.ColumnStringToValue(WAPISESSION session, RecArray array, String colName): RecArray'
  comment: |-
    Converts the values returned by a call to WAPI.WorkList() from
    Strings to their true values.

    **Parameters**:
      session: The WAPISESSION object handle.
      array: The returned RecArray.
      colName: The name of the column whose values should be
               converted.

    **Result**:
      A RecArray with the values of the specified column name
      converted from a String to their original types.
-
  id: DeleteMapByID
  type: Method
  synopsis: 'WAPI.DeleteMapByID(WAPISESSION session, Integer mapID): Integer'
  comment: |-
    Deletes the Map from the Map database with the specified
    mapID.

    **Parameters**:
      session: The WAPISESSION object handle.
      mapID: The ID of the desired Map.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: DeleteMapTask
  type: Method
  synopsis: 'WAPI.DeleteMapTask(WAPIMAPTASK task): Integer'
  comment: |-
    Deletes the task from the map definition. This task was
    determined using WAPI.AllocMapTask() or
    WAPI.AllocNthMapTask().

    **Parameters**:
      task: The WAPIMAPTASK object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: DeleteTaskLink
  type: Method
  synopsis: 'WAPI.DeleteTaskLink(WAPIMAPTASK fromTask, Integer linkType, WAPIMAPTASK toTask): Integer'
  comment: |-
    Deletes the link from the specified tasks.

    **Parameters**:
      fromTask: The WAPIMAPTASK handle specifying the task the link
                comes from.
      linkType: Specifies a constant indicating the link type, can
                be: WAPI.MAPTASK_FALSELINKS WAPI.MAPTASK_LOOPLINKS
                WAPI.MAPTASK_TRUELINKS
      toTask: The WAPIMAPTASK handle specifying the task the link
              goes to.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: DeleteWork
  type: Method
  synopsis: 'WAPI.DeleteWork(WAPIWORK work, Integer workID): Integer'
  comment: |-
    Deletes the specified Stopped or Completed workflow.


    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: DeleteWorkData
  type: Method
  synopsis: 'WAPI.DeleteWorkData(WAPIWORK work, Integer type, Integer subtype): Integer'
  comment: |-
    Deletes data from the Data Package specified by the type and
    subtype.

    **Parameters**:
      work: The WAPIWORK object handle.
      type: The type of data in the Data Package.
      subtype: The subtype of data in the Data Package.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: FreeMap
  type: Method
  synopsis: 'WAPI.FreeMap(WAPIMAP map): Integer'
  comment: |-
    Frees the memory held by the WAPIMAP object.

    **Parameters**:
      map: The WAPIMAP object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: FreeMapTask
  type: Method
  synopsis: 'WAPI.FreeMapTask(WAPIMAPTASK task): Integer'
  comment: |-
    Frees the memory held by the WAPIMAPTASK object.

    **Parameters**:
      task: The WAPIMAPTASK handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: FreeSession
  type: Method
  synopsis: 'WAPI.FreeSession(WAPISESSION session): Integer'
  comment: |-
    Logs out the WAPISESSION object and frees any associated
    memory.

    **Parameters**:
      session: The WAPISESSION object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: FreeSubWork
  type: Method
  synopsis: 'WAPI.FreeSubWork(WAPISUBWORK subWork): Integer'
  comment: |-
    Frees the memory held by the WAPISUBWORK object.

    **Parameters**:
      subWork: The WAPISUBWORK object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: FreeWork
  type: Method
  synopsis: 'WAPI.FreeWork(WAPIWORK work): Integer'
  comment: |-
    Frees the memory held by the WAPIWORK object.

    **Parameters**:
      work: The WAPIWORK object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: GetTaskLinks
  type: Method
  synopsis: 'WAPI.GetTaskLinks(WAPIMAPTASK task, Integer linkType): List'
  comment: |-
    Gets a List of the task ids for all links of the specified types
    for the specified task.

    **Parameters**:
      task: The WAPIMAPTASK handle.
      linkType: Specifies a constant indicating the link type, can
                be: WAPI.MAPTASK_FALSELINKS WAPI.MAPTASK_LOOPLINKS
                WAPI.MAPTASK_TRUELINKS

    **Result**:
      A List of task ids if successful; Error otherwise.
-
  id: GetWorkData
  type: Method
  synopsis: 'WAPI.GetWorkData(WAPIWORK work, Integer type, Integer subtype): Dynamic'
  comment: |-
    Gets the data from the specified type and subtype stored in the
    data package.

    **Parameters**:
      work: The WAPIWORK object handle.
      type: The type of data in the Data Package.
      subtype: The subtype of data in the Data Package.

    **Result**:
      The data from the data package; Error otherwise.
-
  id: LLMapToWMap
  type: Method
  synopsis: 'WAPI.LLMapToWMap(WAPIMAP map, RecArray mapInfo, RecArray tasks, RecArray links): Integer'
  comment: |-
    Takes a map definition from Livelink OScript and converts it to a
    WAPIMAP definition.

    **Parameters**:
      map: The WAPIMAP object handle.
      mapInfo: A RecArray with only one row which describes various
               properties of the map.
      tasks: A RecArray with one row for each task to add to the map
             definition.
      links: A RecArray with one row for each link to add to the map
             definition.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: ListWorkData
  type: Method
  synopsis: 'WAPI.ListWorkData(WAPIWORK work, [Boolean allWork): RecArray'
  comment: |-
    Returns the data that was stored for the specified work.

    **Parameters**:
      work: The WAPIWORK object handle.
      allWork: Optional parameter used to specify whether all the
               data, including any subworkflow data, should be
               returned. By default allWork is set to False.

    **Result**:
      A RecArray of work data if successful; error otherwise.
-
  id: LoadMapByID
  type: Method
  synopsis: 'WAPI.LoadMapByID(WAPIMAP map, Integer mapID): Integer'
  comment: |-
    Loads the map information from the Map database for the map with
    the specified ID.

    **Parameters**:
      map: The WAPIMAP object handle.
      mapID: The ID for the desired map.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: LoadTaskStatus
  type: Method
  synopsis: 'WAPI.LoadTaskStatus(WAPISESSION session, Integer workID, [Integer subWorkID], [Integer taskID]): RecArray'
  comment: |-
    Loads the task information for the specified workID, subWorkID,
    and taskID.

    **Parameters**:
      session: The WAPISESSION object handle.
      workID: The workID for the desired workflow.
      subWorkID: The optional subWorkID for the desired
                 sub-workflow.
      taskID: The optional taskID for the desired workflow task.

    **Result**:
      A RecArray of task information if successful; Error
      otherwise.
-
  id: LoadWorkAudit
  type: Method
  synopsis: 'WAPI.LoadWorkAudit(WAPISESSION session, Integer workID, [Integer subWorkID], [Integer taskID]): RecArray'
  comment: |-
    Loads the audit trail for the specified workID, subWorkID, and
    taskID.

    **Parameters**:
      session: The WAPISESSION object handle.
      workID: The workID for the desired workflow.
      subWorkID: The optional subWorkID for the desired
                 sub-workflow.
      taskID: The optional taskID for the desired workflow task.

    **Result**:
      A RecArray of audit information if successful; Error
      otherwise.
-
  id: LoadWorkStatus
  type: Method
  synopsis: 'WAPI.LoadWorkStatus(WAPISESSION session, Integer workID, [Integer subWorkID], [Integer taskID]): List'
  comment: |-
    Loads the information for a workflow. You can optionally limit
    the amount of data returned by specifying a subWorkID and a
    taskID. A List of 3 RecArrays is returned where the first
    RecArray contains information about the workflow as a whole, the
    second RecArray contains information about the sub-workflows,
    and the third RecArray contains information about the workflow
    tasks.

    **Parameters**:
      session: The WAPISESSION object handle.
      workID: The workID for the desired workflow.
      subWorkID: The optional subWorkID for the desired
                 sub-workflow.
      taskID: The optional taskID for the desired workflow task.

    **Result**:
      A List of 3 RecArrays if successful; Error otherwise.
-
  id: PrepareMap
  type: Method
  synopsis: 'WAPI.PrepareMap(WAPIWORK work, WAPIMAP map, [Integer flags]): Integer'
  comment: |-
    Saves the map definition to the map database and sets up the work
    object for workflow initiation.

    **Parameters**:
      work: The WAPIWORK object handle.
      map: The WAPIMAP object handle for the desired map.
      flags: Optional flag values to control the map. The available
             values are: WAPI.MAP_FLAG_ARCHIVEONCOMPLETE
             WAPI.MAP_FLAG_DELETEONCOMPLETE
             WAPI.MAP_FLAG_EMAILATTACHMENTASFILE
             WAPI.MAP_FLAG_EMAILATTACHMENTASLINK
             WAPI.MAP_FLAG_RESUMEONRETURN WAPI.MAP_FLAG_SKIPWEEKENDS
             WAPI.MAP_FLAG_TEMPMAP

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: PrepareSubMap
  type: Method
  synopsis: 'WAPI.PrepareSubMap(WAPIWORK work, WAPIMAP map, [Integer flags]): Integer'
  comment: |-
    Saves the map definition to the map database and sets up the work
    object to initiate the map as a sub-workflow.

    **Parameters**:
      work: The WAPIWORK object handle.
      map: The WAPIMAP object handle for the desired map.
      flags: Optional flag values to control the map. The available
             values are: WAPI.MAP_FLAG_ARCHIVEONCOMPLETE
             WAPI.MAP_FLAG_DELETEONCOMPLETE
             WAPI.MAP_FLAG_EMAILATTACHMENTASFILE
             WAPI.MAP_FLAG_EMAILATTACHMENTASLINK
             WAPI.MAP_FLAG_RESUMEONRETURN WAPI.MAP_FLAG_SKIPWEEKENDS
             WAPI.MAP_FLAG_TEMPMAP

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: PrepareSubWork
  type: Method
  synopsis: 'WAPI.PrepareSubWork(WAPIWORK work, Integer mapID, [Integer flags]): Integer'
  comment: |-
    Sets up the work object to initiate the specified map as a
    subworkflow.

    **Parameters**:
      work: The WAPIWORK object handle.
      mapID: The ID of the desired Workflow Map.
      flags: Optional flag values to control the map. The available
             values are: WAPI.MAP_FLAG_ARCHIVEONCOMPLETE
             WAPI.MAP_FLAG_DELETEONCOMPLETE
             WAPI.MAP_FLAG_EMAILATTACHMENTASFILE
             WAPI.MAP_FLAG_EMAILATTACHMENTASLINK
             WAPI.MAP_FLAG_RESUMEONRETURN WAPI.MAP_FLAG_SKIPWEEKENDS
             WAPI.MAP_FLAG_TEMPMAP

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: PrepareWork
  type: Method
  synopsis: 'WAPI.PrepareWork(WAPIWORK work, Integer mapID, [Integer flags]): Integer'
  comment: |-
    Sets up the work object to initiate the specified map as a
    workflow.

    **Parameters**:
      work: The WAPIWORK object handle.
      mapID: The ID of the desired Workflow Map.
      flags: Optional flag values to control the map. The available
             values are: WAPI.MAP_FLAG_ARCHIVEONCOMPLETE
             WAPI.MAP_FLAG_DELETEONCOMPLETE
             WAPI.MAP_FLAG_EMAILATTACHMENTASFILE
             WAPI.MAP_FLAG_EMAILATTACHMENTASLINK
             WAPI.MAP_FLAG_RESUMEONRETURN WAPI.MAP_FLAG_SKIPWEEKENDS
             WAPI.MAP_FLAG_TEMPMAP

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: ReassignTask
  type: Method
  synopsis: 'WAPI.ReassignTask(WAPIWORK work, Integer workID, Integer subWorkID, Integer taskID, Integer userID): Integer'
  comment: |-
    Reassigns the task specified by the workID, subWorkID, and taskID
    to the given userID.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.
      subWorkID: The subWorkID for the desired workflow.
      taskID: The taskID for the desired workflow task.
      userID: -- The ID of the user to which the task should be
              reassigned.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: ReplaceMap
  type: Method
  synopsis: 'WAPI.ReplaceMap(WAPIMAP map): Integer'
  comment: |-
    Saves the modified map definition to the map database replacing
    the original.

    **Parameters**:
      map: The WAPIMAP object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: ResumeWork
  type: Method
  synopsis: 'WAPI.ResumeWork(WAPIWORK work, Integer workID): Integer'
  comment: |-
    Sets the status of a suspended workflow to Executing.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: SaveMap
  type: Method
  synopsis: 'WAPI.SaveMap(WAPIMAP map): Integer'
  comment: |-
    Saves a WAPIMAP map definition to the map database.

    **Parameters**:
      map: The WAPIMAP object handle.

    **Result**:
      The ID for the new map if successful; Error otherwise.
-
  id: SetCallback
  type: Method
  synopsis: 'WAPI.SetCallback(WAPISESSION session, Dynamic feature, [Dynamic object]): Integer'
  comment: |-
    Specifies the WAPI callback routine and context argument that is
    passed to the callback.

    **Parameters**:
      session: The WAPISESSION object handle.
      feature: The name of the script to execute.
      object: The optional object that contains the script.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: SetWorkData
  type: Method
  synopsis: 'WAPI.SetWorkData(WAPIWORK work, Integer type, Integer subtype, [String description], Dynamic value): Integer'
  comment: |-
    Sets data stored in a data package.

    **Parameters**:
      work: The WAPIWORK object handle.
      type: The type of the data.
      subtype: The subtype of the data.
      description: The optional description of the data.
      value: The data to store.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: StartTask
  type: Method
  synopsis: 'WAPI.StartTask(WAPIWORK work, Integer workID, Integer subWorkID, Integer taskID, Integer flags): Integer'
  comment: |-
    Marks the specified task as started and sets up the WAPIWORK
    object handle to be able to access the work package.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.
      subWorkID: The subWorkID for the desired workflow.
      taskID: The taskID for the desired workflow task.
      flags: -- A flag for StartTask options. This flag can be
             combined by Bitwise OR using the following constants:
             WAPI.STARTTASK_FLAG_REEXECUTE
             WAPI.STARTTASK_FLAG_NOAUDIT

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: StartWork
  type: Method
  synopsis: 'WAPI.StartWork(WAPIWORK work, [String title]): Integer'
  comment: |-
    Initiates a workflow that was prepared with a call to
    WAPI.PrepareWork() and readies any initial tasks.

    **Parameters**:
      work: The WAPIWORK object handle.
      title: The optional title of the Workflow.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: StopWork
  type: Method
  synopsis: 'WAPI.StopWork(WAPIWORK work, Integer workID): Integer'
  comment: |-
    Sets the status of an Executing or Suspended workflow to
    Stopped.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: SuspendWork
  type: Method
  synopsis: 'WAPI.SuspendWork(WAPIWORK work, Integer workID): Integer'
  comment: |-
    Sets the status of an Executing workflow to Suspended.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: TaskAuditUserData
  type: Method
  synopsis: 'WAPI.TaskAuditUserData(WAPIWORK work, Integer workID, Integer subWorkID, Integer taskID, Dynamic data, [Integer iterNum]): Integer'
  comment: |-
    Adds a row to the audit trail and stores the specified data. Even
    though the iterNum parameter is optional, if not specified the
    iternum will be accessed from the appropriate Workflow database
    table by using the workID, subworkID and taskID. If you already
    have the iterNum, it is more efficient to pass it in instead of
    having the function access it.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The work ID of the Workflow
      subworkID: The subwork ID of the Workflow
      taskID: The task ID of the task
      data: The data to store.
      iterNum: The optional iteration number for this specific
               task

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: TaskCancel
  type: Method
  synopsis: 'WAPI.TaskCancel(WAPIWORK work): Integer'
  comment: |-
    Notifies the workflow engine that work on this task is completed
    for the time being but skip marking the task as Done and send
    the workflow on to the next step.

    **Parameters**:
      work: The WAPIWORK object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: TaskDone
  type: Method
  synopsis: 'WAPI.TaskDone(WAPIWORK work, [Dynamic linkType]): Integer'
  comment: |-
    Marks the task as Done and takes the paths from the task that are
    of the specified link type. If the linkType is not specified,
    then the True/Normal paths will be taken.

    **Parameters**:
      work: The WAPIWORK object handle.
      linkType: The optional type of link paths that should be taken
                from this step.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: UpdateSubWorkAttribute
  type: Method
  synopsis: 'WAPI.UpdateSubWorkAttribute(WAPIWORK work, Integer workID, Integer subWorkID, Integer attribute, Dynamic value): Integer'
  comment: |-
    Updates the value of a subWork attribute for a workflow.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.
      subWorkID: The subWorkID for the desired workflow.attributeattribute -attribute - Specifies a constant indicating the
                 subWork attribute. Acceptable values are:
                 WAPI.SUBWORK_TITLE WAPI.SUBWORK_PROJECT
                 WAPI.SUBWORK_FLAGS WAPI.SUBWORK_USERDATA
                 WAPI.SUBWORK_CUSTOMDATAattribute - Specifies a constant indicating the
                 subWork attribute. Acceptable values are:
                 WAPI.SUBWORK_TITLE WAPI.SUBWORK_PROJECT
                 WAPI.SUBWORK_FLAGS WAPI.SUBWORK_USERDATA
                 WAPI.SUBWORK_CUSTOMDATA value
-
  id: UpdateSubWorkPrepare
  type: Method
  synopsis: 'WAPI.UpdateSubWorkPrepare(WAPIWORK work, WAPIMAP map, Integer workID, Integer subWorkID): Integer'
  comment: |-
    Prepares the map and work object for a workflow already
    in-process for update.  The new map definition is saved to the
    map database. The in-process workflow must be suspended in order
    for this call to succeed.

    **Parameters**:
      work: The WAPIWORK object handle.
      map: The WAPIMAP object handle.
      workID: The workID for the desired workflow.
      subWorkID: The subWorkID for the desired workflow.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: UpdateSubWorkStart
  type: Method
  synopsis: 'WAPI.UpdateSubWorkStart(WAPIWORK work): Integer'
  comment: |-
    Updates the in-process workflow specified by work. This is used
    after a call to WAPI.UpdateSubWorkPrepare(). Here, the work
    information is updated, and the workflow is made to now point to
    the new map definition.

    **Parameters**:
      work: The WAPIWORK object handle.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: UpdateTaskAttribute
  type: Method
  synopsis: 'WAPI.UpdateTaskAttribute(WAPIWORK work, Integer workID, Integer subWorkID, Integer taskID, Integer attribute, Dynamic value): Integer'
  comment: |-
    Updates the value of a task attribute for a workflow.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.
      subWorkID: The subWorkID for the desired workflow.
      taskID: The taskID for the desired task.
      attribute: -- Specifies a constant indicating the task
                 attribute. Acceptable values are:
                 WAPI.SUBWORKTASK_TITLE WAPI.SUBWORKTASK_USERCOMMENT
                 WAPI.SUBWORKTASK_PERFORMERID
                 WAPI.SUBWORKTASK_USERSTATUS WAPI.SUBWORKTASK_FLAGS
                 WAPI.SUBWORKTASK_USERDATA
                 WAPI.SUBWORKTASK_CUSTOMDATA
      value: -The new value for the attribute.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: UpdateWorkAttribute
  type: Method
  synopsis: 'WAPI.UpdateWorkAttribute(WAPIWORK work, Integer workID, Integer attribute, Dynamic value): Integer'
  comment: |-
    Updates the value of a work attribute.

    **Parameters**:
      work: The WAPIWORK object handle.
      workID: The workID for the desired workflow.
      attribute: Specifies a constant indicating the work attribute.
                 Acceptable values are: WAPI.WORK_TITLE
                 WAPI.WORK_PROJECT WAPI.WORK_MANAGERID
                 WAPI.WORK_FLAGS WAPI.WORK_USERDATA
                 WAPI.WORK_CUSTOMDATA
      value: The new value for the attribute.

    **Result**:
      (Integer 0) if successful; Error otherwise.
-
  id: WorkList
  type: Method
  synopsis: 'WAPI.WorkList(WAPISESSION session, String viewName, Dynamic whereClause, Integer flags): RecArray'
  comment: |-
    Returns workflow information using the specified view, SQL
    "where" clause, and flags.  If specific workflow information is
    required, a view can be constructed in the database schema, and
    this call can be used to select rows from that view.

    **Parameters**:
      session: The WAPISESSION object handle.
      viewName: The view to do the select from
      whereClause: An SQL "where" clause if one is desired, 0 or
                   Undefined if not.
      flags: Flag value for built-in "where" clauses. These flags can
             be combined by Bitwise OR using the following
             constants: WAPI.LIST_IFINITIATED WAPI.LIST_IFMANAGED
             WAPI.LIST_IFPERFORMER

    **Result**:
      A RecArray of work information if successful; Error
      otherwise.
-
  id: WorkList2
  type: Method
  synopsis: 'WAPI.WorkList2(WAPISESSION session, String viewName, Dynamic whereClause, Dynamic orderby, Integer flags): RecArray'
  comment: |-
    Returns ordered Workflow information using the specified view,
    SQL "where" clause, SQL �orderby� clause and flags. If specific
    Workflow information is required, a view can be constructed in
    the database schema, and this call can be used to select rows
    from that view.

    **Parameters**:
      session: The WAPISESSION object handle.
      viewName: The view to do the select from
      whereClause: An SQL "where" clause if one is desired, 0 or
                   Undefined if not.
      orderby: An SQL "orderby" to order the results.
      flags: Flag value for built-in "where" clauses. These flags can
             be combined by Bitwise OR using the following
             constants: WAPI.LIST_IFINITIATED WAPI.LIST_IFMANAGED
             WAPI.LIST_IFPERFORMER

    **Result**:
      A RecArray of work information if successful; Error
      otherwise.

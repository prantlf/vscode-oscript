-
  id: AppendMode
  type: Property
  synopsis: 'File.AppendMode: String'
  comment: |-
    Passed to File.Write() to open the file in Append mode; sets the
    write pointer to the end of the file.
-
  id: DOSTermination
  type: Property
  synopsis: 'File.DOSTermination: String'
  comment: |-
    Passed to File.LineTermination() to specify that DOS line
    termination be used.
-
  id: E_AlreadyOpen
  type: Property
  synopsis: 'File.E_AlreadyOpen: Error'
  comment: |-
    Error returned by File.Open() indicating that the specified file
    is currently open.
-
  id: E_CannotCopyDirs
  type: Property
  synopsis: 'File.E_CannotCopyDirs: Error'
  comment: |-
    Error returned by File.CopyStart() indicating that the specified
    directory is a source directory.
-
  id: E_DestAlreadyExists
  type: Property
  synopsis: 'File.E_DestAlreadyExists: Error'
  comment: |-
    Error returned by File.CopyStart() indicating that the specified
    destination file already exists.
-
  id: E_Eof
  type: Property
  synopsis: 'File.E_Eof: Error'
  comment: |-
    Error returned by File.Read() and File.CopyNext() indicating that
    the end of the file has been reached.
-
  id: E_FailedCreatingDest
  type: Property
  synopsis: 'File.E_FailedCreatingDest: Error'
  comment: |-
    Error returned by File.CopyStart() indicating that a problem
    occurred while creating the destination file.
-
  id: E_FailedOpeningDest
  type: Property
  synopsis: 'File.E_FailedOpeningDest: Error'
  comment: |-
    Error returned by File.CopyStart() indicating that an error
    occurred while attempting to open the specified destination
    file.
-
  id: E_FailedOpeningSource
  type: Property
  synopsis: 'File.E_FailedOpeningSource: Error'
  comment: |-
    Error returned by File.CopyStart() indicating that an error
    occurred while attempting to open the specified source
    file.
-
  id: E_FileSystemError
  type: Property
  synopsis: 'File.E_FileSystemError: Error'
  comment: |-
    Error returned by various File built-in functions indicating that
    an internal File system error occurred.
-
  id: E_Filename
  type: Property
  synopsis: 'File.E_Filename: Error'
  comment: |-
    Error returned by functions that require a File specification
    indicating that a file name was not specified or that bad file
    name syntax was used.
-
  id: E_InsufficientMemory
  type: Property
  synopsis: 'File.E_InsufficientMemory: Error'
  comment: |-
    Error returned by File.CopyNext() or File.Read() indicating that
    there is not enough memory to perform the read or copy
    operation.
-
  id: E_Mode
  type: Property
  synopsis: 'File.E_Mode: Error'
  comment: |-
    Error returned by File.Open() indicating that an illegal open
    option was specified.
-
  id: E_ModeError
  type: Property
  synopsis: 'File.E_ModeError: Error'
  comment: |-
    Error returned by various File built-in functions indicating that
    the operation requires a stream File as opened with
    File.OpenStream() instead of a regular file as opened with
    File.Open(), or vice versa.
-
  id: E_NotADirectory
  type: Property
  synopsis: 'File.E_NotADirectory: Error'
  comment: |-
    Error returned by various File built-in functions indicating that
    the specified directory is invalid.
-
  id: E_NotEnoughFreeSpace
  type: Property
  synopsis: 'File.E_NotEnoughFreeSpace: Error'
  comment: |-
    Error returned by File.CopyStart() indicating that there is not
    enough disk space to place a file in the specified
    location.
-
  id: E_NotOpen
  type: Property
  synopsis: 'File.E_NotOpen: Error'
  comment: |-
    Error returned by File.Open() indicating that the specified file
    is not open.
-
  id: E_NotOpenForBinaryAccess
  type: Property
  synopsis: 'File.E_NotOpenForBinaryAccess: Error'
  comment: |-
    Error returned by File.ReadBytes(), File.WriteBytes(), or
    File.Seek() indicating that the File being operated upon is not
    in binary mode as required.
-
  id: E_NotOpenForRead
  type: Property
  synopsis: 'File.E_NotOpenForRead: Error'
  comment: |-
    Error returned by File.Read() indicating that File.ReadMode or
    File.ReadBinMode was not passed as the mode parameter to
    File.Open().
-
  id: E_NotOpenForWrite
  type: Property
  synopsis: 'File.E_NotOpenForWrite: Error'
  comment: |-
    Error returned by File.Write() indicating that File.WriteMode or
    File.WriteBinMode was not passed as the mode parameter to
    File.Open().
-
  id: E_NotSameDirectory
  type: Property
  synopsis: 'File.E_NotSameDirectory: Error'
  comment: |-
    Error returned by File.Rename() indicating that the specified
    directory is different than the original file directory.
-
  id: E_Open
  type: Property
  synopsis: 'File.E_Open: Error'
  comment: |-
    Error returned by File.Open() indicating that the specified file
    could not be opened.
-
  id: E_SourceNotFound
  type: Property
  synopsis: 'File.E_SourceNotFound: Error'
  comment: |-
    Error returned by File.CopyStart() indicating that the specified
    source file cannot be located.
-
  id: E_TargetDirNotFound
  type: Property
  synopsis: 'File.E_TargetDirNotFound: Error'
  comment: |-
    Error returned by File.CopyStart() indicating that the target
    directory cannot be located or does not exist.
-
  id: E_Write
  type: Property
  synopsis: 'File.E_Write: Error'
  comment: |-
    Error returned by File.Write() or the File.WriteBytes function
    indicating that there was an error writing to the file.
-
  id: FileCopyType
  type: Property
  synopsis: 'File.FileCopyType: Integer'
  comment: |-
    The type number for a value of type FileCopy.
-
  id: FileType
  type: Property
  synopsis: 'File.FileType: Integer'
  comment: |-
    The type number for a value of type File.
-
  id: MACTermination
  type: Property
  synopsis: 'File.MACTermination: String'
  comment: |-
    Dummy
-
  id: ReadBinMode
  type: Property
  synopsis: 'File.ReadBinMode: String'
  comment: |-
    Passed to File.Open(); opens the file for reading in binary
    mode.
-
  id: ReadMode
  type: Property
  synopsis: 'File.ReadMode: String'
  comment: |-
    Passed to File.Open(); opens the file for reading in text
    mode.
-
  id: st_mode
  type: Property
  synopsis: 'File.st_mode: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_ino
  type: Property
  synopsis: 'File.st_ino: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_dev
  type: Property
  synopsis: 'File.st_dev: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_rdev
  type: Property
  synopsis: 'File.st_rdev: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_nlink
  type: Property
  synopsis: 'File.st_nlink: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_uid
  type: Property
  synopsis: 'File.st_uid: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_gid
  type: Property
  synopsis: 'File.st_gid: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_size
  type: Property
  synopsis: 'File.st_size: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_atime
  type: Property
  synopsis: 'File.st_atime: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_mtime
  type: Property
  synopsis: 'File.st_mtime: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: st_ctime
  type: Property
  synopsis: 'File.st_ctime: String'
  comment: |-
    Constant used as an index in the Assoc returned by Stat().
-
  id: UNIXTermination
  type: Property
  synopsis: 'File.UNIXTermination: String'
  comment: |-
    Passed to File.LineTermination(); sets line termination to UNIX
    line termination.
-
  id: WriteBinMode
  type: Property
  synopsis: 'File.WriteBinMode: String'
  comment: |-
    Passed to File.Open(); opens the file for writing in binary
    mode.
-
  id: WriteMode
  type: Property
  synopsis: 'File.WriteMode: String'
  comment: |-
    Passed to File.Open(); opens the file for writing in text
    mode.
-
  id: Access
  type: Method
  synopsis: 'File.Access(String filePath): String'
  comment: |-
    Searches for the specified file.

    **Parameters**:
      filePath: A String indicating the local file path and file
                name. The path can be specified in full or
                partially. The name of the file (for example,
                MYFILE.TXT) must be specified.

    **Result**:
      The full file path of the specified file, if found; Undefined
      otherwise.
-
  id: Close
  type: Method
  synopsis: 'File.Close(File openFile): Boolean'
  comment: |-
    Closes an open file. To avoid resource leaks, close all open
    files when they are no longer needed. See File.Open().

    **Parameters**:
      openFile: A File opened by File.Open().

    **Result**:
      A Boolean value where TRUE indicates that the file was
      successfully closed; Error otherwise.
-
  id: CopyEnd
  type: Method
  synopsis: 'File.CopyEnd(FileCopy operation): Boolean'
  comment: |-
    Ends the file copy operation and closes the File being copied.
    See File.CopyStart() and File.CopyNext().

    **Parameters**:
      operation: A FileCopy, as returned by the File.CopyStart
                 function, indicating the file copy operation to
                 end.

    **Result**:
      A Boolean value where TRUE indicates that the operation
      successfully ended and closed the file.
-
  id: CopyNext
  type: Method
  synopsis: 'File.CopyNext(FileCopy operation): Boolean'
  comment: |-
    Copies the next block in the specified file copy operation. See
    File.CopyStart() and File.CopyEnd().

    **Parameters**:
      operation: A FileCopy value, as returned by File.CopyStart(),
                 indicating the file copy operation to
                 continue.

    **Result**:
      TRUE if there are more file blocks to copy, File.E_Eof if the
      last block was copied; or another Error if an error occurred
      in the file copy process.
-
  id: CopyStart
  type: Method
  synopsis: 'File.CopyStart(Dynamic source, Dynamic destination, [Integer blockSize]): FileCopy'
  comment: |-
    Begins a file copy operation. This function fails and returns
    Error if the file specified by the destination parameter exists.
    Use File.Exists() to determine if the file exists before
    proceeding with File.CopyStart().  See File.CopyNext() and
    File.CopyEnd().

    **Parameters**:
      source: Either a File, as returned by File.StringToFile(), or a
              String indicating the file to be copied.
      destination: Either a File, as returned by File.StringToFile(),
                   or a String indicating the path and file name of
                   the file to be copied to the source file.
      blockSize: An optional Integer indicating the size, in bytes,
                 of the file blocks to be copied. Defaults to a
                 block size of 16K if not specified.

    **Result**:
      A FileCopy identifying the file copy operation, if successful;
      Error otherwise.
-
  id: Create
  type: Method
  synopsis: 'File.Create(Dynamic newFile): Boolean'
  comment: |-
    Creates an empty text file or directory. The newly created file
    must be opened by File.Open() before it can be used.

    **Parameters**:
      newFile: Either a file or directory, as returned by
               File.StringToFile(), or a String indicating the file
               or directory (including full path specification) to
               be created. Defaults to the current directory if no
               path is specified. A directory is created if the
               operating system-specific directory separator is
               included in newFile (for example,�TEMP\).

    **Result**:
      A Boolean value where TRUE indicates that the file or directory
      was created.
-
  id: Delete
  type: Method
  synopsis: 'File.Delete(Dynamic delFile): Boolean'
  comment: |-
    Deletes the specified file or directory. No confirmation dialog
    box is displayed before the specified file or directory is
    deleted. The File.Delete function fails and returns FALSE if the
    specified directory is not empty. The File.Delete function will
    fail if the file being deleted was opened by File.Open(). If the
    file is open, it must be closed by File.Close() before it can be
    deleted.

    **Parameters**:
      delFile: Either a File, as returned by File.StringToFile(),
               referencing the desired file, or a String indicating
               the file or directory to be deleted. Defaults to the
               current directory if no path is specified.

    **Result**:
      A Boolean value where TRUE indicates that the file or directory
      was successfully deleted.
-
  id: Dir
  type: Method
  synopsis: 'File.Dir([String directory]): String'
  comment: |-
    Returns the name of the current directory and changes it if a new
    directory is specified.

    **Parameters**:
      directory: An optional String indicating the new current
                 directory. If not specified, the current directory
                 will not be changed.

    **Result**:
      A String indicating the current directory. If a new directory
      was specified, the original directory is returned.
-
  id: Eof
  type: Method
  synopsis: 'File.Eof(File openFile): Boolean'
  comment: |-
    Determines whether the current file position is at the end of
    file.

    **Parameters**:
      openFile: A File opened by File.Open().

    **Result**:
      A Boolean value where TRUE indicates that the current file
      position is at the end of file.
-
  id: Exists
  type: Method
  synopsis: 'File.Exists(Dynamic theFile): Boolean'
  comment: |-
    Determines if the specified file or directory exists.

    **Parameters**:
      theFile: Either a File, as returned by File.FileToString(),
               referencing the desired file or directory, or a
               String indicating the name of the file or directory.
               Defaults to the current directory if no path is
               specified.

    **Result**:
      A Boolean value where TRUE indicates that the specified file or
      directory exists.
-
  id: FileList
  type: Method
  synopsis: 'File.FileList([String directory]): List'
  comment: |-
    Returns a List of all of the files in the specified
    directory.

    **Parameters**:
      directory: An optional String indicating the directory whose
                 files are to be listed. Defaults to the current
                 directory if not specified.

    **Result**:
      A List containing String elements, each of which is the name of
      a file in the specified directory.
-
  id: FileToString
  type: Method
  synopsis: 'File.FileToString(File theFile): String'
  comment: |-
    Converts a File reference to a String. This function is the
    converse of File.StringToFile(), and not Str.FileToString(), in
    that it does nothing regarding the contents of a file, but
    rather it only returns the file name with appropriate path
    information as related to an open File.

    **Parameters**:
      theFile: A File, as returned by File.StringToFile or
               File.Open(), referencing the File to be converted to
               a String.

    **Result**:
      A String specifying the name of the file, including any
      supplied path information.
-
  id: Flush
  type: Method
  synopsis: 'File.Flush(File theFile): Dynamic'
  comment: |-
    Flushes the file buffer.

    **Parameters**:
      theFile: A File, as returned by File.StringToFile() or
               File.Open().

    **Result**:
      Undefined if successful, or an Error if the operation
      failed.
-
  id: FreeSpace
  type: Method
  synopsis: 'File.FreeSpace([String target]): Long'
  comment: |-
    Returns the number of free bytes in the target directory, or the
    current directory.

    **Parameters**:
      target: An optional String indicating the target directory. If
              not specified, the current directory will be the
              target.

    **Result**:
      A Long indicating the number of free bytes in the
      directory.
-
  id: GetName
  type: Method
  synopsis: 'File.GetName(Dynamic theFile): String'
  comment: |-
    Returns the file name of a File, not including the path.

    **Parameters**:
      theFile: Either a File, as returned by File.StringToFile() or
               File.Open(), referencing the desired file or a String
               indicating the name of the file.

    **Result**:
      A String containing the file name (file and extension), not
      including the path.
-
  id: GetPath
  type: Method
  synopsis: 'File.GetPath(Dynamic myFile): String'
  comment: |-
    Returns the directory specification for a file.

    **Parameters**:
      myFile: Either a File, as returned by File.StringToFile() or
              File.Open(), referencing the desired file or a String
              indicating the name of the file.

    **Result**:
      A String containing only the path name, including a directory
      separator. Returns an empty String if the myFile parameter
      does not specify a path.
-
  id: IsDir
  type: Method
  synopsis: 'File.IsDir(String directory): Boolean'
  comment: |-
    Determines whether the supplied String represents an existing
    directory.

    **Parameters**:
      directory: A String indicating the directory name.

    **Result**:
      A Boolean value where TRUE indicates that the directory
      parameter specifies an existing directory.
-
  id: IsDirSpec
  type: Method
  synopsis: 'File.IsDirSpec(String directory): Boolean'
  comment: |-
    Determines whether the last character of the supplied String is a
    directory separator.

    **Parameters**:
      directory: A String to test.

    **Result**:
      A Boolean value where TRUE indicates that the last character of
      the supplied String is the system-dependent directory
      separator. This function does not check for the existence of
      the specified directory.
-
  id: IsText
  type: Method
  synopsis: 'File.IsText(Dynamic theFile): Boolean'
  comment: |-
    Determines if the specified file is a text file.

    **Parameters**:
      theFile: Either a File, as returned by File.StringToFile() or
               File.Open(), referencing the desired file or a String
               indicating the name of the file. Defaults to the
               current directory if no path is specified.

    **Result**:
      A Boolean value where TRUE indicates that the specified file
      has a txt extension.
-
  id: LineTermination
  type: Method
  synopsis: 'File.LineTermination(File theFile, String terminator): Integer'
  comment: |-
    Alters the system-dependent default line termination used by
    File.Write() for a given File. This allows text files to be
    created for use on different platforms. This function alters the
    system-dependent default line termination used by File.Write().
    This allows text files to be created for use on different
    platforms.

    **Parameters**:
      theFile: A File, as returned by File.StringToFile() or
               File.Open(), referencing the File on which to
               operate.
      terminator: A String constant indicating the type of line
                  termination to use.

    **Result**:
      A String specifying the line termination character string,
      identical to the String provided in the terminator
      parameter.
-
  id: MacCreator
  type: Method
  synopsis: 'File.MacCreator(File arg1, [String arg2]): String'
  comment: |-
    Dummy

    **Parameters**:
      arg1 - Dummy:
      arg2 - Dummy:

    **Result**:
      Dummy
-
  id: MacType
  type: Method
  synopsis: 'File.MacType(File arg1, [String arg2]): String'
  comment: |-
    Dummy

    **Parameters**:
      arg1 - Dummy:
      arg2 - Dummy:

    **Result**:
      Dummy
-
  id: NextBlock
  type: Method
  synopsis: 'File.NextBlock(FileCopy operation): Integer'
  comment: |-
    Returns the ordinal number of the next file block to be
    copied.

    **Parameters**:
      operation: A FileCopy, as returned by File.CopyStart(),
                 indicating the desired file copy operation.

    **Result**:
      An Integer specifying the number of the next block to be
      copied.
-
  id: NumBlocks
  type: Method
  synopsis: 'File.NumBlocks(FileCopy operation): Integer'
  comment: |-
    Returns the number of file blocks to be copied.

    **Parameters**:
      operation: A FileCopy value, as returned by File.CopyStart(),
                 indicating the desired file copy operation.

    **Result**:
      An Integer specifying the total number of blocks to be
      copied.
-
  id: Open
  type: Method
  synopsis: 'File.Open(Dynamic theFile, String mode): File'
  comment: |-
    Opens a text file in preparation for an append, read, or write
    operation. Note that the file is not opened as a stream file, as
    with File.OpenStream(), and certain read and write operations,
    such as File.ReadValue(), File.ReadUntil(), and
    File.WriteValue() require a stream file.

    **Parameters**:
      theFile: Either a File, as returned by File.StringToFile(), or
               a String indicating a file name and an optional path
               to the desired file.
      mode: A mode constant indicating the operation to be performed
            on the open file.

    **Result**:
      A File representing the open file if successful; Error
      otherwise.
-
  id: OpenStream
  type: Method
  synopsis: 'File.OpenStream(Dynamic theFile, String mode): File'
  comment: |-
    Similar to File.Open(), except that the file is opened as a
    stream file.  A stream file differs from a regular file in that
    behaves as a stream, pipe, socket, or C's STDIN.  Because of
    this cannot be traversed (File.Seek() and File.Rewind() are not
    supported on stream files) and, while its input can be
    exhausted, File.Eof() does not apply in practice, since there is
    no "end" to the stream since the potential for more input exists
    while the stream is open.  Various other operations are not
    supported for streams, such as File.Read() or File.ReadBytes().
    Meanwhile, other operations are available only to stream files,
    such as File.ReadUntil(), File.ReadValue(), and
    File.WriteValue().

    **Parameters**:
      theFile: The stream File to open, which should be either a
               String specifying the file, or a File as from
               File.FileToString().
      mode: A mode constant (File.ReadMode, etc.) indicating the
            operation to be performed on the file.

    **Result**:
      The newly opened file if successful; Error otherwise.
-
  id: Read
  type: Method
  synopsis: 'File.Read(File theFile, [Integer numChars]): String'
  comment: |-
    Reads one line from a text file.

    **Parameters**:
      theFile: A File, as returned by File.Open(), referencing a file
               that was opened for a normal, and not binary, read
               operation.
      arg2: An optional Integer indicating the number of characters
            to read. If not included, one line, as determined by an
            operating system-specific line delimiter, is read. To
            read a line that is longer than the default of 1024
            characters, specify a value between 1024 and 65,534
            inclusive. Values outside of this range will be
            ignored.

    **Result**:
      A String containing one line of the File (not including the
      line delimiter) if successful; Error otherwise.
-
  id: ReadBytes
  type: Method
  synopsis: 'File.ReadBytes(File theFile, Integer numBytes): Bytes'
  comment: |-
    Reads and returns a block of Bytes data from the specified
    File.

    **Parameters**:
      theFile: A File, opened with File.Open() in File.ReadBinMode,
               from which to read.
      numBytes: Specifies an Integer indicating the number of bytes
                to read, up to a maximum of 32K.

    **Result**:
      The number of Bytes read; Error otherwise.
-
  id: ReadUntil
  type: Method
  synopsis: 'File.ReadUntil(File theFile, String delimiter): String'
  comment: |-
    Reads a stream File until the specified delimiter is found.

    **Parameters**:
      theFile: The stream File from which to read, as opened by
               File.OpenStream().
      delimiter: A character delimiter which stops reading when
                 encountered.

    **Result**:
      A String if no error resulted, which will be the characters
      read either up to and including delimiter if it is found, or
      until the stream is exhausted.  The File must be a stream, as
      opened with File.OpenStream(), otherwise
      File.E_NotOpenForBinaryAccess is returned.
-
  id: ReadValue
  type: Method
  synopsis: 'File.ReadValue(File theFile): Dynamic'
  comment: |-
    Reads an OScript Value from a stream File.

    **Parameters**:
      theFile: A stream file, as opened with File.OpenStream(), from
               which one OScript value, as written by
               File.WriteValue(), is read.

    **Result**:
      The value read, or Undefined if there was nothing on the stream
      to read, or File.E_ModeError if the File is not a stream as
      opened with File.OpenStream().
-
  id: Rename
  type: Method
  synopsis: 'File.Rename(Dynamic theFile, Dynamic name): Boolean'
  comment: |-
    Renames the specified file.

    **Parameters**:
      theFile: Either a File, as returned by File.StringToFile(), or
               a String specifying the name of the file to
               rename.
      name: Either a File, as returned by the File.StringToFile
            function, or a String specifying the new file name.

    **Result**:
      A Boolean value where TRUE indicates that the file was
      successfully renamed.
-
  id: ResolveAlias
  type: Method
  synopsis: 'File.ResolveAlias(String arg1): String'
  comment: |-
    Dummy

    **Parameters**:
      arg1 - Dummy:

    **Result**:
      Dummy
-
  id: Rewind
  type: Method
  synopsis: 'File.Rewind(File theFile): Boolean'
  comment: |-
    Sets the file read/write pointer back to the start of the
    file.

    **Parameters**:
      theFile: Specifies a File, as returned by File.Open(),
               indicating the File to rewind.

    **Result**:
      A Boolean value where TRUE indicates that the pointer was
      successfully moved to the start of the file.
-
  id: Seek
  type: Method
  synopsis: 'File.Seek(File theFile, Integer newPosition): Integer'
  comment: |-
    Set the file position pointer to a new position.

    **Parameters**:
      theFile: A File, as returned by File.Open() with mode
               File.ReadBinMode.
      newPosition: The new position that the read/write position
                   pointer should be set to.

    **Result**:
      The new position of the file position pointer, or an error if
      the file was not opened, or the mode is not File.ReadBinMode,
      or the file is a stream file.
-
  id: Separator
  type: Method
  synopsis: 'File.Separator(): String'
  comment: |-
    Returns the operating system-dependent character used to separate
    directories in a path specification.


    **Result**:
      The system-dependent directory separator character.
-
  id: SetName
  type: Method
  synopsis: 'File.SetName(File theFile, String newName): File'
  comment: |-
    Sets the name of a file (but not the extension).

    **Parameters**:
      theFile: A File, as returned by File.StringToFile(), of the
               file to be named.
      newName: A String indicating the new name of the file.

    **Result**:
      A File reference to the modified file if successful; Error
      otherwise.
-
  id: StartupDir
  type: Method
  synopsis: 'File.StartupDir(): String'
  comment: |-
    Returns the full path of the Livelink start-up directory.


    **Result**:
      A String indicating the directory from which the currently
      executing process was started.
-
  id: Stat
  type: Method
  synopsis: 'File.Stat(Dynamic statFile): Assoc'
  comment: |-
    Returns the status of the specified file or directory. This is
    intended to be used by those who are familiar with the ANSI stat
    function. It will return an Assoc of values for
    platform-specific status information. Constants are available to
    use as keys into the returned Assoc (see below). **Parameters**:
    statFile - Either a File, as returned by File.StringToFile(),
    referencing the desired file, or a String indicating the file or
    directory. Returns: An Assoc of the status values on success;
    undefined otherwise. The valid key values are StatFileMode,
    StatInodeNumber, StatDeviceID, StatRDevice, StatNumberLinks,
    StatUserID, StatGroupID, StatSize, StatLastAccessTime,
    StatLastModifyTime, and StatLastChangeTime.
-
  id: StringToFile
  type: Method
  synopsis: 'File.StringToFile(String fileSpec): File'
  comment: |-
    Converts a file specification String to an OScript file
    reference.  See File.FileToString().

    **Parameters**:
      fileSpec: Specifies a String file specification that can
                optionally contain path information.

    **Result**:
      A File referencing the specified file.
-
  id: SystemDir
  type: Method
  synopsis: 'File.SystemDir(): String'
  comment: |-
    Returns the name of the System directory.


    **Result**:
      The operating system-dependent system directory.
-
  id: ThreadDir
  type: Method
  synopsis: 'File.ThreadDir([String directory]): String'
  comment: |-
    Sets or queries the current working directory for the this
    thread.

    **Parameters**:
      directory: Specifies an optional String identifying the desired
                 working directory. Defaults to the working
                 directory of the currently executing thread if not
                 specified.

    **Result**:
      A String indicating the current thread directory. If the
      directory parameter was specified, the String returned
      indicates the previous thread directory before execution of
      this function.
-
  id: Write
  type: Method
  synopsis: 'File.Write(File theFile, String text): Boolean'
  comment: |-
    Writes the specified text to a text file.

    **Parameters**:
      theFile: Specifies a File, as returned by either File.Open() or
               File.OpenStream(), referencing a file that is open
               for write or append in either File.WriteMode or
               File.WriteBinMode.
      text: Specifies the String to be written to the file. It can
            contain multiple line delimiters if multiple lines are
            to be written. Once written, an operating
            system-specific line delimiter is automatically appended
            to the end of the specified String.

    **Result**:
      A Boolean value where TRUE indicates that the text was
      successfully written.
-
  id: WriteBytes
  type: Method
  synopsis: 'File.WriteBytes(File theFile, Bytes value): Integer'
  comment: |-
    Writes the contents of Bytes to the specified file and returns
    the number of bytes written.

    **Parameters**:
      theFile: A File, opened with either File.Open() or
               File.OpenStream() with mode File.WriteBinMode, to
               which the Bytes are to be written.
      value: A Bytes value indicating the binary data to be written
             to the file.

    **Result**:
      The number of bytes written; Error otherwise.
-
  id: WriteValue
  type: Method
  synopsis: 'File.WriteValue(File theFile, Dynamic value): Dynamic'
  comment: |-
    Writes an OScript Value to the specified stream File.

    **Parameters**:
      theFile: A stream file, as opened with File.OpenStream() and
               either mode File.WriteMode or File.WriteBinMode, to
               which the specified value will be written.
      value: An OScript value which will be written to the File for
             later reading with File.ReadValue().

    **Result**:
      Undefined if successful; Error otherwise.

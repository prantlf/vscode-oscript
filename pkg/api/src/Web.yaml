-
  id: CRLF
  type: Property
  synopsis: 'Web.CRLF: String'
  comment: |-
    A String consisting of carriage return (ASCII 13) and line feed
    (ASCII 10). It is generally used with HTTP headers.
-
  id: JS_ESCAPE
  type: Property
  synopsis: 'Web.JS_ESCAPE: String'
  comment: |-
    An integer (1) that is used for selecting the JavaScript escape()
    function.
-
  id: JS_ENCODEURI
  type: Property
  synopsis: 'Web.JS_ENCODEURI: String'
  comment: |-
    An integer (2) that is used for selecting the JavaScript
    encodeURI() function.
-
  id: JS_ENCODEURICOMPONENT
  type: Property
  synopsis: 'Web.JS_ENCODEURICOMPONENT: String'
  comment: |-
    An integer (3) that is used for selecting the JavaScript
    encodeURIComponent() function.
-
  id: CookieDecode
  type: Method
  synopsis: 'Web.CookieDecode(String cookie, String ipAddress, [Integer salt]) deprecated : String'
  comment: |-
    This is a deprecated function and will be removed in a future
    version. Decodes a string which was encoded using CookieEncode.
    The ipAddress and salt arguments must contain the same values as
    were passed to CookieEncode.

    **Parameters**:
      cookie: The cookie string to be decoded.
      ipAddress: The IP address of the workstation from which this
                 cookie was received.
      salt: An optional unique integer; must be the same as was
            passed to CookieEncode.

    **Result**:
      The decoded cookie string.
-
  id: CookieEncode
  type: Method
  synopsis: 'Web.CookieEncode(String cookie, String ipAddress, [Integer salt]) deprecated : String'
  comment: |-
    This is a deprecated function and will be removed in a future
    version. Encodes a cookie for security purposes.

    **Parameters**:
      cookie: The cookie string to be encoded.
      ipAddress: The IP address of the workstation to which this
                 cookie will be sent.
      salt: An optional unique integer which is factored into the
            encoding algorithm.

    **Result**:
      The encoded cookie string.
-
  id: DecodeForURL
  type: Method
  synopsis: 'Web.DecodeForURL(String value): String'
  comment: |-
    Decodes a previously encoded string. The plus-sign character
    ("+") will be converted to a space and hexadecimal
    non-alphanumeric characters (represented by "%xx", where xx is
    hexadecimal notation) will be converted to their ASCII
    equivalent. In addition if the server is not using UTF-8, the
    UTF-8 encoded characters will be converted.

    **Parameters**:
      value: The String to be unescaped.

    **Result**:
      The converted string.
-
  id: EncodeForURL
  type: Method
  synopsis: 'Web.EncodeForURL(String value): String'
  comment: |-
    Converts a specified String to new URL format. First represent
    each non-ASCII character in UTF-8 then by escaping
    non-alphanumeric characters into URL hexadecimal sequences and
    spaces in to the plus-sign ("+") character.

    **Parameters**:
      value: The string to convert.

    **Result**:
      The converted string.
-
  id: Escape
  type: Method
  synopsis: 'Web.Escape(String value): String'
  comment: |-
    Converts a specified String to URL format by escaping
    non-alphanumeric characters into URL hexadecimal sequences and
    spaces in to the plus-sign ("+") character.

    **Parameters**:
      value: The string to convert.

    **Result**:
      The converted string.
-
  id: EscapeForJS
  type: Method
  synopsis: 'Web.EscapeForJS(String value, Integer mode): String'
  comment: |-
    Converts a specified string to the format that is compatible with
    one of the JavaScript escape methods: escape(), escapeURI, and
    escapeURIComponent.

    **Parameters**:
      value: The string to be escaped.
      mode: The mode for selecting which JavaScript escape fuction to
            encode the string specified. mode = WEB.JS_ESCAPE  for
            JavaScript's escape(), which does not encode: @*/+ mode
            = WEB.JS_ENCODEURI for JavaScript's encodeURI(), which
            does not encode: ~!@#$&*()=:/,;?+' mode =
            WEB.JS_ENCODEURICOMPONENT JavaScript's
            encodeURIComponent(), which does not encode:
            ~!*()'.

    **Result**:
      The converted string.
-
  id: EscapeJSON
  type: Method
  synopsis: 'Web.EscapeJSON(String value): String'
  comment: |-
    Converts a specified String to JSON format.

    **Parameters**:
      value: The string to convert.

    **Result**:
      The converted string.
-
  id: EscapeHTML
  type: Method
  synopsis: 'Web.EscapeHTML(String value): String'
  comment: |-
    Converts a specified string to HTML format by escaping special
    characters, such as greater-than, less-than, and ampersand.

    **Parameters**:
      value: The string to be escaped.

    **Result**:
      The converted string.
-
  id: EscapeXML
  type: Method
  synopsis: 'Web.EscapeXML(String value): String'
  comment: |-
    Converts a specified string to XML compatible format by escaping
    special characters, such as greater-than, less-than, ampersand
    and apostrophe. The difference between EscapeHTML and EscapeXML
    is a single quotation ' (or apostrophe) is escaped as &

    **Parameters**:
      value: The string to be escaped.

    **Result**:
      The converted string.
-
  id: File
  type: Method
  synopsis: 'Web.File(Dynamic context, String filePath, [String mimeType]): Boolean'
  comment: |-
    Writes the specified file to the output context. The output
    context may either be a socket, which will then send the file to
    the Web browser, or a file. **Parameters**: context - The output
    context. filePath - The server file path of the file to be sent
    to the output context. mimeType - An optional data string
    specifying the MIME type of the data in filePath. If this
    parameter is specified, the HTTP headers are also sent as part
    of the file. Returns: TRUE if successful; FALSE if not. Here is
    a short example:
-
  id: Format
  type: Method
  synopsis: 'Web.Format(String format, [List substitutions]): String'
  comment: |-
    Web-formats a list of values based on a specified formatting
    string. This is useful for generating HTML, since Format()
    applies either HTML-escaping, URL-escaping, or no escaping
    (literal) to the substitution strings upon substitution.
    Formatting is marked in the format string by the backtick (`),
    instead of the percent symbol (%) as usual, since the percent
    symbol is used to escape URLs.

    **Parameters**:
      format: The text and placeholders. Format strings are:
              ValueThe text and placeholders. Format strings are:
              ValueThe text and placeholders. Format strings are: Value
              DescriptionThe text and placeholders. Format strings are: Value
              Description `The text and placeholders. Format strings are: Value
              Description `The text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String.The text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `LThe text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `LThe text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `L Literal (String is not escaped).The text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `L Literal (String is not escaped). `HThe text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `L Literal (String is not escaped). `HThe text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `L Literal (String is not escaped). `H HTML
              (calls EscapeHTML() on the String)The text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `L Literal (String is not escaped). `H HTML
              (calls EscapeHTML() on the String) 'UThe text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `L Literal (String is not escaped). `H HTML
              (calls EscapeHTML() on the String) 'UThe text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `L Literal (String is not escaped). `H HTML
              (calls EscapeHTML() on the String) 'U URL (calls
              Escape() on the String)The text and placeholders. Format strings are: Value
              Description ` A backtick (`), consumes no substitution
              String. `L Literal (String is not escaped). `H HTML
              (calls EscapeHTML() on the String) 'U URL (calls
              Escape() on the String)
      substitutions: A list of Strings to substitute into the
                     format.

    **Result**:
      The formatted String.
-
  id: FromJSON
  type: Method
  synopsis: 'Web.FromJSON(String value): Dynamic'
  comment: |-
    Deserializes an object from the specified string in JSON
    format.

    **Parameters**:
      value: The string to deserialize from JSON.

    **Result**:
      The deserialized object.
-
  id: ToJSON
  type: Method
  synopsis: 'Web.ToJSON(Dynamic value): String'
  comment: |-
    Serializes the specified object to JSON format.

    **Parameters**:
      value: The object to serialize to JSON.

    **Result**:
      The JSON representation of the object.
-
  id: Unescape
  type: Method
  synopsis: 'Web.Unescape(String value): String'
  comment: |-
    Unescapes a previously escaped string. The plus-sign character
    ("+") will be converted to a space and hexadecimal
    non-alphanumeric characters (represented by "%xx", where xx is
    hexadecimal notation) will be converted to their ASCII
    equivalent.

    **Parameters**:
      value: The String to be unescaped.

    **Result**:
      The converted string.
-
  id: UnescapeJSON
  type: Method
  synopsis: 'Web.UnescapeJSON(String value): String'
  comment: |-
    Converts a specified String from JSON format.

    **Parameters**:
      value: The string to convert.

    **Result**:
      The converted string.
-
  id: Write
  type: Method
  synopsis: 'Web.Write(Dynamic context, Dynamic value, [List valueList]): Boolean'
  comment: |-
    Writes the specified value to the output context. The output
    context may either be a socket, as connected to a Web browser,
    or a file.

    **Parameters**:
      context: The output context.
      value: The value to write. The value must be type Bytes or
             String.
      valueList: An optional format. If this parameter is specified,
                 the second and third parameters are passed to the
                 Web.Format function and the resulting string is
                 written to the output context.

    **Result**:
      TRUE if successful; FALSE if not.
-
  id: WriteHeaders
  type: Method
  synopsis: 'Web.WriteHeaders(Dynamic context, String status, String headers): Boolean'
  comment: |-
    Writes a valid HTTP status line and headers to the output context
    (either a socket or a file).

    **Parameters**:
      context: The output context.
      status: The return header status.
      headers: Additional HTTP headers; this must include carriage
               returns and line feeds (Web.CRLF).

    **Result**:
      TRUE if successful; FALSE if not.

-
  id: CacheTreeType
  type: Property
  synopsis: 'CacheTree.CacheTreeType: Integer'
  comment: |-
    Used to test the type of a Dynamic value.
-
  id: Add
  type: Method
  synopsis: 'CacheTree.Add(CacheTree tree, Integer childKey, Integer parentKey, Dynamic childData): Boolean'
  comment: |-
    Creates a new parent-child relationship. Adds the parent key,
    parentKey, to the CacheTree if it is not already present, adds
    the child Key, childKey, to the CacheTree if is not already
    present, and makes sure the child key references the specified
    parent key. The specified child data value, childData, is saved
    along with the child key.

    **Parameters**:
      tree: The CacheTree to manipulate.
      childKey: The Integer key of the child.
      parentKey: The Integer key of the parent.
      childData: A value of any type to be attached to the
                 child.

    **Result**:
      Returns FALSE.
-
  id: Create
  type: Method
  synopsis: 'CacheTree.Create(): CacheTree'
  comment: |-
    Creates an empty CacheTree object.

    **Result**:
      An empty CacheTree object.
-
  id: Get
  type: Method
  synopsis: 'CacheTree.Get(CacheTree tree, Integer key): Dynamic'
  comment: |-
    Returns the data value associated with the specified key.

    **Parameters**:
      tree: The CacheTree to manipulate.
      key: The key of the entry whose associated data value will be
           returned.

    **Result**:
      The data value associated with the specified key, if the
      specified key is not in the CacheTree Undefined will be
      returned.
-
  id: IsAncestor
  type: Method
  synopsis: 'CacheTree.IsAncestor(Dynamic tree, Integer key, Integer testParentKey, Integer testChildKey): Boolean'
  comment: |-
    Returns TRUE if the test child key is an ancestor of the
    specified key. The parent key of the child key, testChildKey,
    must be specified as testParentKey.

    **Parameters**:
      tree: The CacheTree.
      key: The Key for which the testChildKey's ancestry is
           tested.
      testParentKey: The Parent Key for testChildKey.
      testChildKey: The child key that is tested to determine if it
                    is an ancestor of the specified Key.

    **Result**:
      Returns TRUE if the test child key is an ancestor of the
      specified key.
-
  id: IsDescendant
  type: Method
  synopsis: 'CacheTree.IsDescendant(Dynamic tree, Integer key, Integer testParentKey, Integer testChildKey): Boolean'
  comment: |-
    Returns TRUE if the test child key is a descendant of the
    specified key. The parent key of the child key, testChildKey,
    must be specified as testParentKey.

    **Parameters**:
      tree: The CacheTree.
      key: The key for which testChildKey may be a descendant.
      testParentKey: The parent key of testChildKey.
      testChildKey: The key which may be a descendant of key.

    **Result**:
      Returns TRUE if the test child key is a descendant of the
      specified key.
-
  id: Parent
  type: Method
  synopsis: 'CacheTree.Parent(CacheTree tree, Integer key): Integer'
  comment: |-
    Returns the Parent Key for the specified entry.

    **Parameters**:
      tree: The CacheTree.
      key: The child key whose parent key will be returned.

    **Result**:
      The parent key of the specified key.
-
  id: Set
  type: Method
  synopsis: 'CacheTree.Set(CacheTree tree, Integer key, Dynamic data): Boolean'
  comment: |-
    Reset the data value maintained for the specified key. No action
    is performed if the specified key does not exist.

    **Parameters**:
      tree: The CacheTree to manipulate.
      key: The key to which the data value is associated.
      data: The new data value to be associated with the specified
            key.

    **Result**:
      TRUE if the specified key was in the CacheTree, otherwise
      FALSE.
